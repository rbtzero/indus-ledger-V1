{"text": "def fibonacci(n):\n    if n <= 1:\n        return n\n    return fibonacci(n-1) + fibonacci(n-2)"}
{"text": "class Stack:\n    def __init__(self):\n        self.items = []\n    def push(self, item):\n        self.items.append(item)"}
{"text": "import numpy as np\n\ndef matrix_multiply(A, B):\n    return np.dot(A, B)"}
{"text": "for i in range(10):\n    if i % 2 == 0:\n        print(f'{i} is even')"}
{"text": "def quicksort(arr):\n    if len(arr) <= 1:\n        return arr\n    pivot = arr[0]\n    return quicksort([x for x in arr[1:] if x < pivot]) + [pivot] + quicksort([x for x in arr[1:] if x >= pivot])"}
{"text": "async function fetchData(url) {\n    const response = await fetch(url);\n    return response.json();\n}"}
{"text": "SELECT name, age FROM users WHERE age > 18 ORDER BY name;"}
{"text": "def binary_search(arr, target):\n    left, right = 0, len(arr) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == target:\n            return mid\n        elif arr[mid] < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return -1"}
{"text": "def fibonacci(n):\n    if n <= 1:\n        return n\n    return fibonacci(n-1) + fibonacci(n-2)"}
{"text": "class Stack:\n    def __init__(self):\n        self.items = []\n    def push(self, item):\n        self.items.append(item)"}
{"text": "import numpy as np\n\ndef matrix_multiply(A, B):\n    return np.dot(A, B)"}
{"text": "for i in range(10):\n    if i % 2 == 0:\n        print(f'{i} is even')"}
{"text": "def quicksort(arr):\n    if len(arr) <= 1:\n        return arr\n    pivot = arr[0]\n    return quicksort([x for x in arr[1:] if x < pivot]) + [pivot] + quicksort([x for x in arr[1:] if x >= pivot])"}
{"text": "async function fetchData(url) {\n    const response = await fetch(url);\n    return response.json();\n}"}
{"text": "SELECT name, age FROM users WHERE age > 18 ORDER BY name;"}
{"text": "def binary_search(arr, target):\n    left, right = 0, len(arr) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == target:\n            return mid\n        elif arr[mid] < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return -1"}
{"text": "def fibonacci(n):\n    if n <= 1:\n        return n\n    return fibonacci(n-1) + fibonacci(n-2)"}
{"text": "class Stack:\n    def __init__(self):\n        self.items = []\n    def push(self, item):\n        self.items.append(item)"}
{"text": "import numpy as np\n\ndef matrix_multiply(A, B):\n    return np.dot(A, B)"}
{"text": "for i in range(10):\n    if i % 2 == 0:\n        print(f'{i} is even')"}
{"text": "def quicksort(arr):\n    if len(arr) <= 1:\n        return arr\n    pivot = arr[0]\n    return quicksort([x for x in arr[1:] if x < pivot]) + [pivot] + quicksort([x for x in arr[1:] if x >= pivot])"}
{"text": "async function fetchData(url) {\n    const response = await fetch(url);\n    return response.json();\n}"}
{"text": "SELECT name, age FROM users WHERE age > 18 ORDER BY name;"}
{"text": "def binary_search(arr, target):\n    left, right = 0, len(arr) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == target:\n            return mid\n        elif arr[mid] < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return -1"}
{"text": "def fibonacci(n):\n    if n <= 1:\n        return n\n    return fibonacci(n-1) + fibonacci(n-2)"}
{"text": "class Stack:\n    def __init__(self):\n        self.items = []\n    def push(self, item):\n        self.items.append(item)"}
{"text": "import numpy as np\n\ndef matrix_multiply(A, B):\n    return np.dot(A, B)"}
{"text": "for i in range(10):\n    if i % 2 == 0:\n        print(f'{i} is even')"}
{"text": "def quicksort(arr):\n    if len(arr) <= 1:\n        return arr\n    pivot = arr[0]\n    return quicksort([x for x in arr[1:] if x < pivot]) + [pivot] + quicksort([x for x in arr[1:] if x >= pivot])"}
{"text": "async function fetchData(url) {\n    const response = await fetch(url);\n    return response.json();\n}"}
{"text": "SELECT name, age FROM users WHERE age > 18 ORDER BY name;"}
{"text": "def binary_search(arr, target):\n    left, right = 0, len(arr) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == target:\n            return mid\n        elif arr[mid] < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return -1"}
{"text": "def fibonacci(n):\n    if n <= 1:\n        return n\n    return fibonacci(n-1) + fibonacci(n-2)"}
{"text": "class Stack:\n    def __init__(self):\n        self.items = []\n    def push(self, item):\n        self.items.append(item)"}
{"text": "import numpy as np\n\ndef matrix_multiply(A, B):\n    return np.dot(A, B)"}
{"text": "for i in range(10):\n    if i % 2 == 0:\n        print(f'{i} is even')"}
{"text": "def quicksort(arr):\n    if len(arr) <= 1:\n        return arr\n    pivot = arr[0]\n    return quicksort([x for x in arr[1:] if x < pivot]) + [pivot] + quicksort([x for x in arr[1:] if x >= pivot])"}
{"text": "async function fetchData(url) {\n    const response = await fetch(url);\n    return response.json();\n}"}
{"text": "SELECT name, age FROM users WHERE age > 18 ORDER BY name;"}
{"text": "def binary_search(arr, target):\n    left, right = 0, len(arr) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == target:\n            return mid\n        elif arr[mid] < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return -1"}
{"text": "def fibonacci(n):\n    if n <= 1:\n        return n\n    return fibonacci(n-1) + fibonacci(n-2)"}
{"text": "class Stack:\n    def __init__(self):\n        self.items = []\n    def push(self, item):\n        self.items.append(item)"}
{"text": "import numpy as np\n\ndef matrix_multiply(A, B):\n    return np.dot(A, B)"}
{"text": "for i in range(10):\n    if i % 2 == 0:\n        print(f'{i} is even')"}
{"text": "def quicksort(arr):\n    if len(arr) <= 1:\n        return arr\n    pivot = arr[0]\n    return quicksort([x for x in arr[1:] if x < pivot]) + [pivot] + quicksort([x for x in arr[1:] if x >= pivot])"}
{"text": "async function fetchData(url) {\n    const response = await fetch(url);\n    return response.json();\n}"}
{"text": "SELECT name, age FROM users WHERE age > 18 ORDER BY name;"}
{"text": "def binary_search(arr, target):\n    left, right = 0, len(arr) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == target:\n            return mid\n        elif arr[mid] < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return -1"}
{"text": "def fibonacci(n):\n    if n <= 1:\n        return n\n    return fibonacci(n-1) + fibonacci(n-2)"}
{"text": "class Stack:\n    def __init__(self):\n        self.items = []\n    def push(self, item):\n        self.items.append(item)"}
{"text": "import numpy as np\n\ndef matrix_multiply(A, B):\n    return np.dot(A, B)"}
{"text": "for i in range(10):\n    if i % 2 == 0:\n        print(f'{i} is even')"}
{"text": "def quicksort(arr):\n    if len(arr) <= 1:\n        return arr\n    pivot = arr[0]\n    return quicksort([x for x in arr[1:] if x < pivot]) + [pivot] + quicksort([x for x in arr[1:] if x >= pivot])"}
{"text": "async function fetchData(url) {\n    const response = await fetch(url);\n    return response.json();\n}"}
{"text": "SELECT name, age FROM users WHERE age > 18 ORDER BY name;"}
{"text": "def binary_search(arr, target):\n    left, right = 0, len(arr) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == target:\n            return mid\n        elif arr[mid] < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return -1"}
{"text": "def fibonacci(n):\n    if n <= 1:\n        return n\n    return fibonacci(n-1) + fibonacci(n-2)"}
{"text": "class Stack:\n    def __init__(self):\n        self.items = []\n    def push(self, item):\n        self.items.append(item)"}
{"text": "import numpy as np\n\ndef matrix_multiply(A, B):\n    return np.dot(A, B)"}
{"text": "for i in range(10):\n    if i % 2 == 0:\n        print(f'{i} is even')"}
{"text": "def quicksort(arr):\n    if len(arr) <= 1:\n        return arr\n    pivot = arr[0]\n    return quicksort([x for x in arr[1:] if x < pivot]) + [pivot] + quicksort([x for x in arr[1:] if x >= pivot])"}
{"text": "async function fetchData(url) {\n    const response = await fetch(url);\n    return response.json();\n}"}
{"text": "SELECT name, age FROM users WHERE age > 18 ORDER BY name;"}
{"text": "def binary_search(arr, target):\n    left, right = 0, len(arr) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == target:\n            return mid\n        elif arr[mid] < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return -1"}
{"text": "def fibonacci(n):\n    if n <= 1:\n        return n\n    return fibonacci(n-1) + fibonacci(n-2)"}
{"text": "class Stack:\n    def __init__(self):\n        self.items = []\n    def push(self, item):\n        self.items.append(item)"}
{"text": "import numpy as np\n\ndef matrix_multiply(A, B):\n    return np.dot(A, B)"}
{"text": "for i in range(10):\n    if i % 2 == 0:\n        print(f'{i} is even')"}
{"text": "def quicksort(arr):\n    if len(arr) <= 1:\n        return arr\n    pivot = arr[0]\n    return quicksort([x for x in arr[1:] if x < pivot]) + [pivot] + quicksort([x for x in arr[1:] if x >= pivot])"}
{"text": "async function fetchData(url) {\n    const response = await fetch(url);\n    return response.json();\n}"}
{"text": "SELECT name, age FROM users WHERE age > 18 ORDER BY name;"}
{"text": "def binary_search(arr, target):\n    left, right = 0, len(arr) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == target:\n            return mid\n        elif arr[mid] < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return -1"}
{"text": "def fibonacci(n):\n    if n <= 1:\n        return n\n    return fibonacci(n-1) + fibonacci(n-2)"}
{"text": "class Stack:\n    def __init__(self):\n        self.items = []\n    def push(self, item):\n        self.items.append(item)"}
{"text": "import numpy as np\n\ndef matrix_multiply(A, B):\n    return np.dot(A, B)"}
{"text": "for i in range(10):\n    if i % 2 == 0:\n        print(f'{i} is even')"}
{"text": "def quicksort(arr):\n    if len(arr) <= 1:\n        return arr\n    pivot = arr[0]\n    return quicksort([x for x in arr[1:] if x < pivot]) + [pivot] + quicksort([x for x in arr[1:] if x >= pivot])"}
{"text": "async function fetchData(url) {\n    const response = await fetch(url);\n    return response.json();\n}"}
{"text": "SELECT name, age FROM users WHERE age > 18 ORDER BY name;"}
{"text": "def binary_search(arr, target):\n    left, right = 0, len(arr) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == target:\n            return mid\n        elif arr[mid] < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return -1"}
{"text": "def fibonacci(n):\n    if n <= 1:\n        return n\n    return fibonacci(n-1) + fibonacci(n-2)"}
{"text": "class Stack:\n    def __init__(self):\n        self.items = []\n    def push(self, item):\n        self.items.append(item)"}
{"text": "import numpy as np\n\ndef matrix_multiply(A, B):\n    return np.dot(A, B)"}
{"text": "for i in range(10):\n    if i % 2 == 0:\n        print(f'{i} is even')"}
{"text": "def quicksort(arr):\n    if len(arr) <= 1:\n        return arr\n    pivot = arr[0]\n    return quicksort([x for x in arr[1:] if x < pivot]) + [pivot] + quicksort([x for x in arr[1:] if x >= pivot])"}
{"text": "async function fetchData(url) {\n    const response = await fetch(url);\n    return response.json();\n}"}
{"text": "SELECT name, age FROM users WHERE age > 18 ORDER BY name;"}
{"text": "def binary_search(arr, target):\n    left, right = 0, len(arr) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == target:\n            return mid\n        elif arr[mid] < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return -1"}
{"text": "def fibonacci(n):\n    if n <= 1:\n        return n\n    return fibonacci(n-1) + fibonacci(n-2)"}
{"text": "class Stack:\n    def __init__(self):\n        self.items = []\n    def push(self, item):\n        self.items.append(item)"}
{"text": "import numpy as np\n\ndef matrix_multiply(A, B):\n    return np.dot(A, B)"}
{"text": "for i in range(10):\n    if i % 2 == 0:\n        print(f'{i} is even')"}
{"text": "def quicksort(arr):\n    if len(arr) <= 1:\n        return arr\n    pivot = arr[0]\n    return quicksort([x for x in arr[1:] if x < pivot]) + [pivot] + quicksort([x for x in arr[1:] if x >= pivot])"}
{"text": "async function fetchData(url) {\n    const response = await fetch(url);\n    return response.json();\n}"}
{"text": "SELECT name, age FROM users WHERE age > 18 ORDER BY name;"}
{"text": "def binary_search(arr, target):\n    left, right = 0, len(arr) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == target:\n            return mid\n        elif arr[mid] < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return -1"}
{"text": "def fibonacci(n):\n    if n <= 1:\n        return n\n    return fibonacci(n-1) + fibonacci(n-2)"}
{"text": "class Stack:\n    def __init__(self):\n        self.items = []\n    def push(self, item):\n        self.items.append(item)"}
{"text": "import numpy as np\n\ndef matrix_multiply(A, B):\n    return np.dot(A, B)"}
{"text": "for i in range(10):\n    if i % 2 == 0:\n        print(f'{i} is even')"}
{"text": "def quicksort(arr):\n    if len(arr) <= 1:\n        return arr\n    pivot = arr[0]\n    return quicksort([x for x in arr[1:] if x < pivot]) + [pivot] + quicksort([x for x in arr[1:] if x >= pivot])"}
{"text": "async function fetchData(url) {\n    const response = await fetch(url);\n    return response.json();\n}"}
{"text": "SELECT name, age FROM users WHERE age > 18 ORDER BY name;"}
{"text": "def binary_search(arr, target):\n    left, right = 0, len(arr) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == target:\n            return mid\n        elif arr[mid] < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return -1"}
{"text": "def fibonacci(n):\n    if n <= 1:\n        return n\n    return fibonacci(n-1) + fibonacci(n-2)"}
{"text": "class Stack:\n    def __init__(self):\n        self.items = []\n    def push(self, item):\n        self.items.append(item)"}
{"text": "import numpy as np\n\ndef matrix_multiply(A, B):\n    return np.dot(A, B)"}
{"text": "for i in range(10):\n    if i % 2 == 0:\n        print(f'{i} is even')"}
{"text": "def quicksort(arr):\n    if len(arr) <= 1:\n        return arr\n    pivot = arr[0]\n    return quicksort([x for x in arr[1:] if x < pivot]) + [pivot] + quicksort([x for x in arr[1:] if x >= pivot])"}
{"text": "async function fetchData(url) {\n    const response = await fetch(url);\n    return response.json();\n}"}
{"text": "SELECT name, age FROM users WHERE age > 18 ORDER BY name;"}
{"text": "def binary_search(arr, target):\n    left, right = 0, len(arr) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == target:\n            return mid\n        elif arr[mid] < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return -1"}
{"text": "def fibonacci(n):\n    if n <= 1:\n        return n\n    return fibonacci(n-1) + fibonacci(n-2)"}
{"text": "class Stack:\n    def __init__(self):\n        self.items = []\n    def push(self, item):\n        self.items.append(item)"}
{"text": "import numpy as np\n\ndef matrix_multiply(A, B):\n    return np.dot(A, B)"}
{"text": "for i in range(10):\n    if i % 2 == 0:\n        print(f'{i} is even')"}
{"text": "def quicksort(arr):\n    if len(arr) <= 1:\n        return arr\n    pivot = arr[0]\n    return quicksort([x for x in arr[1:] if x < pivot]) + [pivot] + quicksort([x for x in arr[1:] if x >= pivot])"}
{"text": "async function fetchData(url) {\n    const response = await fetch(url);\n    return response.json();\n}"}
{"text": "SELECT name, age FROM users WHERE age > 18 ORDER BY name;"}
{"text": "def binary_search(arr, target):\n    left, right = 0, len(arr) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == target:\n            return mid\n        elif arr[mid] < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return -1"}
{"text": "def fibonacci(n):\n    if n <= 1:\n        return n\n    return fibonacci(n-1) + fibonacci(n-2)"}
{"text": "class Stack:\n    def __init__(self):\n        self.items = []\n    def push(self, item):\n        self.items.append(item)"}
{"text": "import numpy as np\n\ndef matrix_multiply(A, B):\n    return np.dot(A, B)"}
{"text": "for i in range(10):\n    if i % 2 == 0:\n        print(f'{i} is even')"}
{"text": "def quicksort(arr):\n    if len(arr) <= 1:\n        return arr\n    pivot = arr[0]\n    return quicksort([x for x in arr[1:] if x < pivot]) + [pivot] + quicksort([x for x in arr[1:] if x >= pivot])"}
{"text": "async function fetchData(url) {\n    const response = await fetch(url);\n    return response.json();\n}"}
{"text": "SELECT name, age FROM users WHERE age > 18 ORDER BY name;"}
{"text": "def binary_search(arr, target):\n    left, right = 0, len(arr) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == target:\n            return mid\n        elif arr[mid] < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return -1"}
{"text": "def fibonacci(n):\n    if n <= 1:\n        return n\n    return fibonacci(n-1) + fibonacci(n-2)"}
{"text": "class Stack:\n    def __init__(self):\n        self.items = []\n    def push(self, item):\n        self.items.append(item)"}
{"text": "import numpy as np\n\ndef matrix_multiply(A, B):\n    return np.dot(A, B)"}
{"text": "for i in range(10):\n    if i % 2 == 0:\n        print(f'{i} is even')"}
{"text": "def quicksort(arr):\n    if len(arr) <= 1:\n        return arr\n    pivot = arr[0]\n    return quicksort([x for x in arr[1:] if x < pivot]) + [pivot] + quicksort([x for x in arr[1:] if x >= pivot])"}
{"text": "async function fetchData(url) {\n    const response = await fetch(url);\n    return response.json();\n}"}
{"text": "SELECT name, age FROM users WHERE age > 18 ORDER BY name;"}
{"text": "def binary_search(arr, target):\n    left, right = 0, len(arr) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == target:\n            return mid\n        elif arr[mid] < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return -1"}
{"text": "def fibonacci(n):\n    if n <= 1:\n        return n\n    return fibonacci(n-1) + fibonacci(n-2)"}
{"text": "class Stack:\n    def __init__(self):\n        self.items = []\n    def push(self, item):\n        self.items.append(item)"}
{"text": "import numpy as np\n\ndef matrix_multiply(A, B):\n    return np.dot(A, B)"}
{"text": "for i in range(10):\n    if i % 2 == 0:\n        print(f'{i} is even')"}
{"text": "def quicksort(arr):\n    if len(arr) <= 1:\n        return arr\n    pivot = arr[0]\n    return quicksort([x for x in arr[1:] if x < pivot]) + [pivot] + quicksort([x for x in arr[1:] if x >= pivot])"}
{"text": "async function fetchData(url) {\n    const response = await fetch(url);\n    return response.json();\n}"}
{"text": "SELECT name, age FROM users WHERE age > 18 ORDER BY name;"}
{"text": "def binary_search(arr, target):\n    left, right = 0, len(arr) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == target:\n            return mid\n        elif arr[mid] < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return -1"}
{"text": "def fibonacci(n):\n    if n <= 1:\n        return n\n    return fibonacci(n-1) + fibonacci(n-2)"}
{"text": "class Stack:\n    def __init__(self):\n        self.items = []\n    def push(self, item):\n        self.items.append(item)"}
{"text": "import numpy as np\n\ndef matrix_multiply(A, B):\n    return np.dot(A, B)"}
{"text": "for i in range(10):\n    if i % 2 == 0:\n        print(f'{i} is even')"}
{"text": "def quicksort(arr):\n    if len(arr) <= 1:\n        return arr\n    pivot = arr[0]\n    return quicksort([x for x in arr[1:] if x < pivot]) + [pivot] + quicksort([x for x in arr[1:] if x >= pivot])"}
{"text": "async function fetchData(url) {\n    const response = await fetch(url);\n    return response.json();\n}"}
{"text": "SELECT name, age FROM users WHERE age > 18 ORDER BY name;"}
{"text": "def binary_search(arr, target):\n    left, right = 0, len(arr) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == target:\n            return mid\n        elif arr[mid] < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return -1"}
{"text": "def fibonacci(n):\n    if n <= 1:\n        return n\n    return fibonacci(n-1) + fibonacci(n-2)"}
{"text": "class Stack:\n    def __init__(self):\n        self.items = []\n    def push(self, item):\n        self.items.append(item)"}
{"text": "import numpy as np\n\ndef matrix_multiply(A, B):\n    return np.dot(A, B)"}
{"text": "for i in range(10):\n    if i % 2 == 0:\n        print(f'{i} is even')"}
{"text": "def quicksort(arr):\n    if len(arr) <= 1:\n        return arr\n    pivot = arr[0]\n    return quicksort([x for x in arr[1:] if x < pivot]) + [pivot] + quicksort([x for x in arr[1:] if x >= pivot])"}
{"text": "async function fetchData(url) {\n    const response = await fetch(url);\n    return response.json();\n}"}
{"text": "SELECT name, age FROM users WHERE age > 18 ORDER BY name;"}
{"text": "def binary_search(arr, target):\n    left, right = 0, len(arr) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == target:\n            return mid\n        elif arr[mid] < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return -1"}
{"text": "def fibonacci(n):\n    if n <= 1:\n        return n\n    return fibonacci(n-1) + fibonacci(n-2)"}
{"text": "class Stack:\n    def __init__(self):\n        self.items = []\n    def push(self, item):\n        self.items.append(item)"}
{"text": "import numpy as np\n\ndef matrix_multiply(A, B):\n    return np.dot(A, B)"}
{"text": "for i in range(10):\n    if i % 2 == 0:\n        print(f'{i} is even')"}
{"text": "def quicksort(arr):\n    if len(arr) <= 1:\n        return arr\n    pivot = arr[0]\n    return quicksort([x for x in arr[1:] if x < pivot]) + [pivot] + quicksort([x for x in arr[1:] if x >= pivot])"}
{"text": "async function fetchData(url) {\n    const response = await fetch(url);\n    return response.json();\n}"}
{"text": "SELECT name, age FROM users WHERE age > 18 ORDER BY name;"}
{"text": "def binary_search(arr, target):\n    left, right = 0, len(arr) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == target:\n            return mid\n        elif arr[mid] < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return -1"}
{"text": "def fibonacci(n):\n    if n <= 1:\n        return n\n    return fibonacci(n-1) + fibonacci(n-2)"}
{"text": "class Stack:\n    def __init__(self):\n        self.items = []\n    def push(self, item):\n        self.items.append(item)"}
{"text": "import numpy as np\n\ndef matrix_multiply(A, B):\n    return np.dot(A, B)"}
{"text": "for i in range(10):\n    if i % 2 == 0:\n        print(f'{i} is even')"}
{"text": "def quicksort(arr):\n    if len(arr) <= 1:\n        return arr\n    pivot = arr[0]\n    return quicksort([x for x in arr[1:] if x < pivot]) + [pivot] + quicksort([x for x in arr[1:] if x >= pivot])"}
{"text": "async function fetchData(url) {\n    const response = await fetch(url);\n    return response.json();\n}"}
{"text": "SELECT name, age FROM users WHERE age > 18 ORDER BY name;"}
{"text": "def binary_search(arr, target):\n    left, right = 0, len(arr) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == target:\n            return mid\n        elif arr[mid] < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return -1"}
{"text": "def fibonacci(n):\n    if n <= 1:\n        return n\n    return fibonacci(n-1) + fibonacci(n-2)"}
{"text": "class Stack:\n    def __init__(self):\n        self.items = []\n    def push(self, item):\n        self.items.append(item)"}
{"text": "import numpy as np\n\ndef matrix_multiply(A, B):\n    return np.dot(A, B)"}
{"text": "for i in range(10):\n    if i % 2 == 0:\n        print(f'{i} is even')"}
{"text": "def quicksort(arr):\n    if len(arr) <= 1:\n        return arr\n    pivot = arr[0]\n    return quicksort([x for x in arr[1:] if x < pivot]) + [pivot] + quicksort([x for x in arr[1:] if x >= pivot])"}
{"text": "async function fetchData(url) {\n    const response = await fetch(url);\n    return response.json();\n}"}
{"text": "SELECT name, age FROM users WHERE age > 18 ORDER BY name;"}
{"text": "def binary_search(arr, target):\n    left, right = 0, len(arr) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == target:\n            return mid\n        elif arr[mid] < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return -1"}
{"text": "def fibonacci(n):\n    if n <= 1:\n        return n\n    return fibonacci(n-1) + fibonacci(n-2)"}
{"text": "class Stack:\n    def __init__(self):\n        self.items = []\n    def push(self, item):\n        self.items.append(item)"}
{"text": "import numpy as np\n\ndef matrix_multiply(A, B):\n    return np.dot(A, B)"}
{"text": "for i in range(10):\n    if i % 2 == 0:\n        print(f'{i} is even')"}
{"text": "def quicksort(arr):\n    if len(arr) <= 1:\n        return arr\n    pivot = arr[0]\n    return quicksort([x for x in arr[1:] if x < pivot]) + [pivot] + quicksort([x for x in arr[1:] if x >= pivot])"}
{"text": "async function fetchData(url) {\n    const response = await fetch(url);\n    return response.json();\n}"}
{"text": "SELECT name, age FROM users WHERE age > 18 ORDER BY name;"}
{"text": "def binary_search(arr, target):\n    left, right = 0, len(arr) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == target:\n            return mid\n        elif arr[mid] < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return -1"}
{"text": "def fibonacci(n):\n    if n <= 1:\n        return n\n    return fibonacci(n-1) + fibonacci(n-2)"}
{"text": "class Stack:\n    def __init__(self):\n        self.items = []\n    def push(self, item):\n        self.items.append(item)"}
{"text": "import numpy as np\n\ndef matrix_multiply(A, B):\n    return np.dot(A, B)"}
{"text": "for i in range(10):\n    if i % 2 == 0:\n        print(f'{i} is even')"}
{"text": "def quicksort(arr):\n    if len(arr) <= 1:\n        return arr\n    pivot = arr[0]\n    return quicksort([x for x in arr[1:] if x < pivot]) + [pivot] + quicksort([x for x in arr[1:] if x >= pivot])"}
{"text": "async function fetchData(url) {\n    const response = await fetch(url);\n    return response.json();\n}"}
{"text": "SELECT name, age FROM users WHERE age > 18 ORDER BY name;"}
{"text": "def binary_search(arr, target):\n    left, right = 0, len(arr) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == target:\n            return mid\n        elif arr[mid] < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return -1"}
{"text": "def fibonacci(n):\n    if n <= 1:\n        return n\n    return fibonacci(n-1) + fibonacci(n-2)"}
{"text": "class Stack:\n    def __init__(self):\n        self.items = []\n    def push(self, item):\n        self.items.append(item)"}
{"text": "import numpy as np\n\ndef matrix_multiply(A, B):\n    return np.dot(A, B)"}
{"text": "for i in range(10):\n    if i % 2 == 0:\n        print(f'{i} is even')"}
{"text": "def quicksort(arr):\n    if len(arr) <= 1:\n        return arr\n    pivot = arr[0]\n    return quicksort([x for x in arr[1:] if x < pivot]) + [pivot] + quicksort([x for x in arr[1:] if x >= pivot])"}
{"text": "async function fetchData(url) {\n    const response = await fetch(url);\n    return response.json();\n}"}
{"text": "SELECT name, age FROM users WHERE age > 18 ORDER BY name;"}
{"text": "def binary_search(arr, target):\n    left, right = 0, len(arr) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == target:\n            return mid\n        elif arr[mid] < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return -1"}
{"text": "def fibonacci(n):\n    if n <= 1:\n        return n\n    return fibonacci(n-1) + fibonacci(n-2)"}
{"text": "class Stack:\n    def __init__(self):\n        self.items = []\n    def push(self, item):\n        self.items.append(item)"}
{"text": "import numpy as np\n\ndef matrix_multiply(A, B):\n    return np.dot(A, B)"}
{"text": "for i in range(10):\n    if i % 2 == 0:\n        print(f'{i} is even')"}
{"text": "def quicksort(arr):\n    if len(arr) <= 1:\n        return arr\n    pivot = arr[0]\n    return quicksort([x for x in arr[1:] if x < pivot]) + [pivot] + quicksort([x for x in arr[1:] if x >= pivot])"}
{"text": "async function fetchData(url) {\n    const response = await fetch(url);\n    return response.json();\n}"}
{"text": "SELECT name, age FROM users WHERE age > 18 ORDER BY name;"}
{"text": "def binary_search(arr, target):\n    left, right = 0, len(arr) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == target:\n            return mid\n        elif arr[mid] < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return -1"}
{"text": "def fibonacci(n):\n    if n <= 1:\n        return n\n    return fibonacci(n-1) + fibonacci(n-2)"}
{"text": "class Stack:\n    def __init__(self):\n        self.items = []\n    def push(self, item):\n        self.items.append(item)"}
{"text": "import numpy as np\n\ndef matrix_multiply(A, B):\n    return np.dot(A, B)"}
{"text": "for i in range(10):\n    if i % 2 == 0:\n        print(f'{i} is even')"}
{"text": "def quicksort(arr):\n    if len(arr) <= 1:\n        return arr\n    pivot = arr[0]\n    return quicksort([x for x in arr[1:] if x < pivot]) + [pivot] + quicksort([x for x in arr[1:] if x >= pivot])"}
{"text": "async function fetchData(url) {\n    const response = await fetch(url);\n    return response.json();\n}"}
{"text": "SELECT name, age FROM users WHERE age > 18 ORDER BY name;"}
{"text": "def binary_search(arr, target):\n    left, right = 0, len(arr) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == target:\n            return mid\n        elif arr[mid] < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return -1"}
{"text": "def fibonacci(n):\n    if n <= 1:\n        return n\n    return fibonacci(n-1) + fibonacci(n-2)"}
{"text": "class Stack:\n    def __init__(self):\n        self.items = []\n    def push(self, item):\n        self.items.append(item)"}
{"text": "import numpy as np\n\ndef matrix_multiply(A, B):\n    return np.dot(A, B)"}
{"text": "for i in range(10):\n    if i % 2 == 0:\n        print(f'{i} is even')"}
{"text": "def quicksort(arr):\n    if len(arr) <= 1:\n        return arr\n    pivot = arr[0]\n    return quicksort([x for x in arr[1:] if x < pivot]) + [pivot] + quicksort([x for x in arr[1:] if x >= pivot])"}
{"text": "async function fetchData(url) {\n    const response = await fetch(url);\n    return response.json();\n}"}
{"text": "SELECT name, age FROM users WHERE age > 18 ORDER BY name;"}
{"text": "def binary_search(arr, target):\n    left, right = 0, len(arr) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == target:\n            return mid\n        elif arr[mid] < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return -1"}
{"text": "def fibonacci(n):\n    if n <= 1:\n        return n\n    return fibonacci(n-1) + fibonacci(n-2)"}
{"text": "class Stack:\n    def __init__(self):\n        self.items = []\n    def push(self, item):\n        self.items.append(item)"}
{"text": "import numpy as np\n\ndef matrix_multiply(A, B):\n    return np.dot(A, B)"}
{"text": "for i in range(10):\n    if i % 2 == 0:\n        print(f'{i} is even')"}
{"text": "def quicksort(arr):\n    if len(arr) <= 1:\n        return arr\n    pivot = arr[0]\n    return quicksort([x for x in arr[1:] if x < pivot]) + [pivot] + quicksort([x for x in arr[1:] if x >= pivot])"}
{"text": "async function fetchData(url) {\n    const response = await fetch(url);\n    return response.json();\n}"}
{"text": "SELECT name, age FROM users WHERE age > 18 ORDER BY name;"}
{"text": "def binary_search(arr, target):\n    left, right = 0, len(arr) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == target:\n            return mid\n        elif arr[mid] < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return -1"}
{"text": "def fibonacci(n):\n    if n <= 1:\n        return n\n    return fibonacci(n-1) + fibonacci(n-2)"}
{"text": "class Stack:\n    def __init__(self):\n        self.items = []\n    def push(self, item):\n        self.items.append(item)"}
{"text": "import numpy as np\n\ndef matrix_multiply(A, B):\n    return np.dot(A, B)"}
{"text": "for i in range(10):\n    if i % 2 == 0:\n        print(f'{i} is even')"}
{"text": "def quicksort(arr):\n    if len(arr) <= 1:\n        return arr\n    pivot = arr[0]\n    return quicksort([x for x in arr[1:] if x < pivot]) + [pivot] + quicksort([x for x in arr[1:] if x >= pivot])"}
{"text": "async function fetchData(url) {\n    const response = await fetch(url);\n    return response.json();\n}"}
{"text": "SELECT name, age FROM users WHERE age > 18 ORDER BY name;"}
{"text": "def binary_search(arr, target):\n    left, right = 0, len(arr) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == target:\n            return mid\n        elif arr[mid] < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return -1"}
{"text": "def fibonacci(n):\n    if n <= 1:\n        return n\n    return fibonacci(n-1) + fibonacci(n-2)"}
{"text": "class Stack:\n    def __init__(self):\n        self.items = []\n    def push(self, item):\n        self.items.append(item)"}
{"text": "import numpy as np\n\ndef matrix_multiply(A, B):\n    return np.dot(A, B)"}
{"text": "for i in range(10):\n    if i % 2 == 0:\n        print(f'{i} is even')"}
{"text": "def quicksort(arr):\n    if len(arr) <= 1:\n        return arr\n    pivot = arr[0]\n    return quicksort([x for x in arr[1:] if x < pivot]) + [pivot] + quicksort([x for x in arr[1:] if x >= pivot])"}
{"text": "async function fetchData(url) {\n    const response = await fetch(url);\n    return response.json();\n}"}
{"text": "SELECT name, age FROM users WHERE age > 18 ORDER BY name;"}
{"text": "def binary_search(arr, target):\n    left, right = 0, len(arr) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == target:\n            return mid\n        elif arr[mid] < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return -1"}
{"text": "def fibonacci(n):\n    if n <= 1:\n        return n\n    return fibonacci(n-1) + fibonacci(n-2)"}
{"text": "class Stack:\n    def __init__(self):\n        self.items = []\n    def push(self, item):\n        self.items.append(item)"}
{"text": "import numpy as np\n\ndef matrix_multiply(A, B):\n    return np.dot(A, B)"}
{"text": "for i in range(10):\n    if i % 2 == 0:\n        print(f'{i} is even')"}
{"text": "def quicksort(arr):\n    if len(arr) <= 1:\n        return arr\n    pivot = arr[0]\n    return quicksort([x for x in arr[1:] if x < pivot]) + [pivot] + quicksort([x for x in arr[1:] if x >= pivot])"}
{"text": "async function fetchData(url) {\n    const response = await fetch(url);\n    return response.json();\n}"}
{"text": "SELECT name, age FROM users WHERE age > 18 ORDER BY name;"}
{"text": "def binary_search(arr, target):\n    left, right = 0, len(arr) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == target:\n            return mid\n        elif arr[mid] < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return -1"}
{"text": "def fibonacci(n):\n    if n <= 1:\n        return n\n    return fibonacci(n-1) + fibonacci(n-2)"}
{"text": "class Stack:\n    def __init__(self):\n        self.items = []\n    def push(self, item):\n        self.items.append(item)"}
{"text": "import numpy as np\n\ndef matrix_multiply(A, B):\n    return np.dot(A, B)"}
{"text": "for i in range(10):\n    if i % 2 == 0:\n        print(f'{i} is even')"}
{"text": "def quicksort(arr):\n    if len(arr) <= 1:\n        return arr\n    pivot = arr[0]\n    return quicksort([x for x in arr[1:] if x < pivot]) + [pivot] + quicksort([x for x in arr[1:] if x >= pivot])"}
{"text": "async function fetchData(url) {\n    const response = await fetch(url);\n    return response.json();\n}"}
{"text": "SELECT name, age FROM users WHERE age > 18 ORDER BY name;"}
{"text": "def binary_search(arr, target):\n    left, right = 0, len(arr) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == target:\n            return mid\n        elif arr[mid] < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return -1"}
{"text": "def fibonacci(n):\n    if n <= 1:\n        return n\n    return fibonacci(n-1) + fibonacci(n-2)"}
{"text": "class Stack:\n    def __init__(self):\n        self.items = []\n    def push(self, item):\n        self.items.append(item)"}
{"text": "import numpy as np\n\ndef matrix_multiply(A, B):\n    return np.dot(A, B)"}
{"text": "for i in range(10):\n    if i % 2 == 0:\n        print(f'{i} is even')"}
{"text": "def quicksort(arr):\n    if len(arr) <= 1:\n        return arr\n    pivot = arr[0]\n    return quicksort([x for x in arr[1:] if x < pivot]) + [pivot] + quicksort([x for x in arr[1:] if x >= pivot])"}
{"text": "async function fetchData(url) {\n    const response = await fetch(url);\n    return response.json();\n}"}
{"text": "SELECT name, age FROM users WHERE age > 18 ORDER BY name;"}
{"text": "def binary_search(arr, target):\n    left, right = 0, len(arr) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == target:\n            return mid\n        elif arr[mid] < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return -1"}
{"text": "def fibonacci(n):\n    if n <= 1:\n        return n\n    return fibonacci(n-1) + fibonacci(n-2)"}
{"text": "class Stack:\n    def __init__(self):\n        self.items = []\n    def push(self, item):\n        self.items.append(item)"}
{"text": "import numpy as np\n\ndef matrix_multiply(A, B):\n    return np.dot(A, B)"}
{"text": "for i in range(10):\n    if i % 2 == 0:\n        print(f'{i} is even')"}
{"text": "def quicksort(arr):\n    if len(arr) <= 1:\n        return arr\n    pivot = arr[0]\n    return quicksort([x for x in arr[1:] if x < pivot]) + [pivot] + quicksort([x for x in arr[1:] if x >= pivot])"}
{"text": "async function fetchData(url) {\n    const response = await fetch(url);\n    return response.json();\n}"}
{"text": "SELECT name, age FROM users WHERE age > 18 ORDER BY name;"}
{"text": "def binary_search(arr, target):\n    left, right = 0, len(arr) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == target:\n            return mid\n        elif arr[mid] < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return -1"}
{"text": "def fibonacci(n):\n    if n <= 1:\n        return n\n    return fibonacci(n-1) + fibonacci(n-2)"}
{"text": "class Stack:\n    def __init__(self):\n        self.items = []\n    def push(self, item):\n        self.items.append(item)"}
{"text": "import numpy as np\n\ndef matrix_multiply(A, B):\n    return np.dot(A, B)"}
{"text": "for i in range(10):\n    if i % 2 == 0:\n        print(f'{i} is even')"}
{"text": "def quicksort(arr):\n    if len(arr) <= 1:\n        return arr\n    pivot = arr[0]\n    return quicksort([x for x in arr[1:] if x < pivot]) + [pivot] + quicksort([x for x in arr[1:] if x >= pivot])"}
{"text": "async function fetchData(url) {\n    const response = await fetch(url);\n    return response.json();\n}"}
{"text": "SELECT name, age FROM users WHERE age > 18 ORDER BY name;"}
{"text": "def binary_search(arr, target):\n    left, right = 0, len(arr) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == target:\n            return mid\n        elif arr[mid] < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return -1"}
{"text": "def fibonacci(n):\n    if n <= 1:\n        return n\n    return fibonacci(n-1) + fibonacci(n-2)"}
{"text": "class Stack:\n    def __init__(self):\n        self.items = []\n    def push(self, item):\n        self.items.append(item)"}
{"text": "import numpy as np\n\ndef matrix_multiply(A, B):\n    return np.dot(A, B)"}
{"text": "for i in range(10):\n    if i % 2 == 0:\n        print(f'{i} is even')"}
{"text": "def quicksort(arr):\n    if len(arr) <= 1:\n        return arr\n    pivot = arr[0]\n    return quicksort([x for x in arr[1:] if x < pivot]) + [pivot] + quicksort([x for x in arr[1:] if x >= pivot])"}
{"text": "async function fetchData(url) {\n    const response = await fetch(url);\n    return response.json();\n}"}
{"text": "SELECT name, age FROM users WHERE age > 18 ORDER BY name;"}
{"text": "def binary_search(arr, target):\n    left, right = 0, len(arr) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == target:\n            return mid\n        elif arr[mid] < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return -1"}
{"text": "def fibonacci(n):\n    if n <= 1:\n        return n\n    return fibonacci(n-1) + fibonacci(n-2)"}
{"text": "class Stack:\n    def __init__(self):\n        self.items = []\n    def push(self, item):\n        self.items.append(item)"}
{"text": "import numpy as np\n\ndef matrix_multiply(A, B):\n    return np.dot(A, B)"}
{"text": "for i in range(10):\n    if i % 2 == 0:\n        print(f'{i} is even')"}
{"text": "def quicksort(arr):\n    if len(arr) <= 1:\n        return arr\n    pivot = arr[0]\n    return quicksort([x for x in arr[1:] if x < pivot]) + [pivot] + quicksort([x for x in arr[1:] if x >= pivot])"}
{"text": "async function fetchData(url) {\n    const response = await fetch(url);\n    return response.json();\n}"}
{"text": "SELECT name, age FROM users WHERE age > 18 ORDER BY name;"}
{"text": "def binary_search(arr, target):\n    left, right = 0, len(arr) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == target:\n            return mid\n        elif arr[mid] < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return -1"}
{"text": "def fibonacci(n):\n    if n <= 1:\n        return n\n    return fibonacci(n-1) + fibonacci(n-2)"}
{"text": "class Stack:\n    def __init__(self):\n        self.items = []\n    def push(self, item):\n        self.items.append(item)"}
{"text": "import numpy as np\n\ndef matrix_multiply(A, B):\n    return np.dot(A, B)"}
{"text": "for i in range(10):\n    if i % 2 == 0:\n        print(f'{i} is even')"}
{"text": "def quicksort(arr):\n    if len(arr) <= 1:\n        return arr\n    pivot = arr[0]\n    return quicksort([x for x in arr[1:] if x < pivot]) + [pivot] + quicksort([x for x in arr[1:] if x >= pivot])"}
{"text": "async function fetchData(url) {\n    const response = await fetch(url);\n    return response.json();\n}"}
{"text": "SELECT name, age FROM users WHERE age > 18 ORDER BY name;"}
{"text": "def binary_search(arr, target):\n    left, right = 0, len(arr) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == target:\n            return mid\n        elif arr[mid] < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return -1"}
{"text": "def fibonacci(n):\n    if n <= 1:\n        return n\n    return fibonacci(n-1) + fibonacci(n-2)"}
{"text": "class Stack:\n    def __init__(self):\n        self.items = []\n    def push(self, item):\n        self.items.append(item)"}
{"text": "import numpy as np\n\ndef matrix_multiply(A, B):\n    return np.dot(A, B)"}
{"text": "for i in range(10):\n    if i % 2 == 0:\n        print(f'{i} is even')"}
{"text": "def quicksort(arr):\n    if len(arr) <= 1:\n        return arr\n    pivot = arr[0]\n    return quicksort([x for x in arr[1:] if x < pivot]) + [pivot] + quicksort([x for x in arr[1:] if x >= pivot])"}
{"text": "async function fetchData(url) {\n    const response = await fetch(url);\n    return response.json();\n}"}
{"text": "SELECT name, age FROM users WHERE age > 18 ORDER BY name;"}
{"text": "def binary_search(arr, target):\n    left, right = 0, len(arr) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == target:\n            return mid\n        elif arr[mid] < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return -1"}
{"text": "def fibonacci(n):\n    if n <= 1:\n        return n\n    return fibonacci(n-1) + fibonacci(n-2)"}
{"text": "class Stack:\n    def __init__(self):\n        self.items = []\n    def push(self, item):\n        self.items.append(item)"}
{"text": "import numpy as np\n\ndef matrix_multiply(A, B):\n    return np.dot(A, B)"}
{"text": "for i in range(10):\n    if i % 2 == 0:\n        print(f'{i} is even')"}
{"text": "def quicksort(arr):\n    if len(arr) <= 1:\n        return arr\n    pivot = arr[0]\n    return quicksort([x for x in arr[1:] if x < pivot]) + [pivot] + quicksort([x for x in arr[1:] if x >= pivot])"}
{"text": "async function fetchData(url) {\n    const response = await fetch(url);\n    return response.json();\n}"}
{"text": "SELECT name, age FROM users WHERE age > 18 ORDER BY name;"}
{"text": "def binary_search(arr, target):\n    left, right = 0, len(arr) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == target:\n            return mid\n        elif arr[mid] < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return -1"}
{"text": "def fibonacci(n):\n    if n <= 1:\n        return n\n    return fibonacci(n-1) + fibonacci(n-2)"}
{"text": "class Stack:\n    def __init__(self):\n        self.items = []\n    def push(self, item):\n        self.items.append(item)"}
{"text": "import numpy as np\n\ndef matrix_multiply(A, B):\n    return np.dot(A, B)"}
{"text": "for i in range(10):\n    if i % 2 == 0:\n        print(f'{i} is even')"}
{"text": "def quicksort(arr):\n    if len(arr) <= 1:\n        return arr\n    pivot = arr[0]\n    return quicksort([x for x in arr[1:] if x < pivot]) + [pivot] + quicksort([x for x in arr[1:] if x >= pivot])"}
{"text": "async function fetchData(url) {\n    const response = await fetch(url);\n    return response.json();\n}"}
{"text": "SELECT name, age FROM users WHERE age > 18 ORDER BY name;"}
{"text": "def binary_search(arr, target):\n    left, right = 0, len(arr) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == target:\n            return mid\n        elif arr[mid] < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return -1"}
{"text": "def fibonacci(n):\n    if n <= 1:\n        return n\n    return fibonacci(n-1) + fibonacci(n-2)"}
{"text": "class Stack:\n    def __init__(self):\n        self.items = []\n    def push(self, item):\n        self.items.append(item)"}
{"text": "import numpy as np\n\ndef matrix_multiply(A, B):\n    return np.dot(A, B)"}
{"text": "for i in range(10):\n    if i % 2 == 0:\n        print(f'{i} is even')"}
{"text": "def quicksort(arr):\n    if len(arr) <= 1:\n        return arr\n    pivot = arr[0]\n    return quicksort([x for x in arr[1:] if x < pivot]) + [pivot] + quicksort([x for x in arr[1:] if x >= pivot])"}
{"text": "async function fetchData(url) {\n    const response = await fetch(url);\n    return response.json();\n}"}
{"text": "SELECT name, age FROM users WHERE age > 18 ORDER BY name;"}
{"text": "def binary_search(arr, target):\n    left, right = 0, len(arr) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == target:\n            return mid\n        elif arr[mid] < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return -1"}
{"text": "def fibonacci(n):\n    if n <= 1:\n        return n\n    return fibonacci(n-1) + fibonacci(n-2)"}
{"text": "class Stack:\n    def __init__(self):\n        self.items = []\n    def push(self, item):\n        self.items.append(item)"}
{"text": "import numpy as np\n\ndef matrix_multiply(A, B):\n    return np.dot(A, B)"}
{"text": "for i in range(10):\n    if i % 2 == 0:\n        print(f'{i} is even')"}
{"text": "def quicksort(arr):\n    if len(arr) <= 1:\n        return arr\n    pivot = arr[0]\n    return quicksort([x for x in arr[1:] if x < pivot]) + [pivot] + quicksort([x for x in arr[1:] if x >= pivot])"}
{"text": "async function fetchData(url) {\n    const response = await fetch(url);\n    return response.json();\n}"}
{"text": "SELECT name, age FROM users WHERE age > 18 ORDER BY name;"}
{"text": "def binary_search(arr, target):\n    left, right = 0, len(arr) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == target:\n            return mid\n        elif arr[mid] < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return -1"}
{"text": "def fibonacci(n):\n    if n <= 1:\n        return n\n    return fibonacci(n-1) + fibonacci(n-2)"}
{"text": "class Stack:\n    def __init__(self):\n        self.items = []\n    def push(self, item):\n        self.items.append(item)"}
{"text": "import numpy as np\n\ndef matrix_multiply(A, B):\n    return np.dot(A, B)"}
{"text": "for i in range(10):\n    if i % 2 == 0:\n        print(f'{i} is even')"}
{"text": "def quicksort(arr):\n    if len(arr) <= 1:\n        return arr\n    pivot = arr[0]\n    return quicksort([x for x in arr[1:] if x < pivot]) + [pivot] + quicksort([x for x in arr[1:] if x >= pivot])"}
{"text": "async function fetchData(url) {\n    const response = await fetch(url);\n    return response.json();\n}"}
{"text": "SELECT name, age FROM users WHERE age > 18 ORDER BY name;"}
{"text": "def binary_search(arr, target):\n    left, right = 0, len(arr) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == target:\n            return mid\n        elif arr[mid] < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return -1"}
{"text": "def fibonacci(n):\n    if n <= 1:\n        return n\n    return fibonacci(n-1) + fibonacci(n-2)"}
{"text": "class Stack:\n    def __init__(self):\n        self.items = []\n    def push(self, item):\n        self.items.append(item)"}
{"text": "import numpy as np\n\ndef matrix_multiply(A, B):\n    return np.dot(A, B)"}
{"text": "for i in range(10):\n    if i % 2 == 0:\n        print(f'{i} is even')"}
{"text": "def quicksort(arr):\n    if len(arr) <= 1:\n        return arr\n    pivot = arr[0]\n    return quicksort([x for x in arr[1:] if x < pivot]) + [pivot] + quicksort([x for x in arr[1:] if x >= pivot])"}
{"text": "async function fetchData(url) {\n    const response = await fetch(url);\n    return response.json();\n}"}
{"text": "SELECT name, age FROM users WHERE age > 18 ORDER BY name;"}
{"text": "def binary_search(arr, target):\n    left, right = 0, len(arr) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == target:\n            return mid\n        elif arr[mid] < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return -1"}
{"text": "def fibonacci(n):\n    if n <= 1:\n        return n\n    return fibonacci(n-1) + fibonacci(n-2)"}
{"text": "class Stack:\n    def __init__(self):\n        self.items = []\n    def push(self, item):\n        self.items.append(item)"}
{"text": "import numpy as np\n\ndef matrix_multiply(A, B):\n    return np.dot(A, B)"}
{"text": "for i in range(10):\n    if i % 2 == 0:\n        print(f'{i} is even')"}
{"text": "def quicksort(arr):\n    if len(arr) <= 1:\n        return arr\n    pivot = arr[0]\n    return quicksort([x for x in arr[1:] if x < pivot]) + [pivot] + quicksort([x for x in arr[1:] if x >= pivot])"}
{"text": "async function fetchData(url) {\n    const response = await fetch(url);\n    return response.json();\n}"}
{"text": "SELECT name, age FROM users WHERE age > 18 ORDER BY name;"}
{"text": "def binary_search(arr, target):\n    left, right = 0, len(arr) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == target:\n            return mid\n        elif arr[mid] < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return -1"}
{"text": "def fibonacci(n):\n    if n <= 1:\n        return n\n    return fibonacci(n-1) + fibonacci(n-2)"}
{"text": "class Stack:\n    def __init__(self):\n        self.items = []\n    def push(self, item):\n        self.items.append(item)"}
{"text": "import numpy as np\n\ndef matrix_multiply(A, B):\n    return np.dot(A, B)"}
{"text": "for i in range(10):\n    if i % 2 == 0:\n        print(f'{i} is even')"}
{"text": "def quicksort(arr):\n    if len(arr) <= 1:\n        return arr\n    pivot = arr[0]\n    return quicksort([x for x in arr[1:] if x < pivot]) + [pivot] + quicksort([x for x in arr[1:] if x >= pivot])"}
{"text": "async function fetchData(url) {\n    const response = await fetch(url);\n    return response.json();\n}"}
{"text": "SELECT name, age FROM users WHERE age > 18 ORDER BY name;"}
{"text": "def binary_search(arr, target):\n    left, right = 0, len(arr) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == target:\n            return mid\n        elif arr[mid] < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return -1"}
{"text": "def fibonacci(n):\n    if n <= 1:\n        return n\n    return fibonacci(n-1) + fibonacci(n-2)"}
{"text": "class Stack:\n    def __init__(self):\n        self.items = []\n    def push(self, item):\n        self.items.append(item)"}
{"text": "import numpy as np\n\ndef matrix_multiply(A, B):\n    return np.dot(A, B)"}
{"text": "for i in range(10):\n    if i % 2 == 0:\n        print(f'{i} is even')"}
{"text": "def quicksort(arr):\n    if len(arr) <= 1:\n        return arr\n    pivot = arr[0]\n    return quicksort([x for x in arr[1:] if x < pivot]) + [pivot] + quicksort([x for x in arr[1:] if x >= pivot])"}
{"text": "async function fetchData(url) {\n    const response = await fetch(url);\n    return response.json();\n}"}
{"text": "SELECT name, age FROM users WHERE age > 18 ORDER BY name;"}
{"text": "def binary_search(arr, target):\n    left, right = 0, len(arr) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == target:\n            return mid\n        elif arr[mid] < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return -1"}
{"text": "def fibonacci(n):\n    if n <= 1:\n        return n\n    return fibonacci(n-1) + fibonacci(n-2)"}
{"text": "class Stack:\n    def __init__(self):\n        self.items = []\n    def push(self, item):\n        self.items.append(item)"}
{"text": "import numpy as np\n\ndef matrix_multiply(A, B):\n    return np.dot(A, B)"}
{"text": "for i in range(10):\n    if i % 2 == 0:\n        print(f'{i} is even')"}
{"text": "def quicksort(arr):\n    if len(arr) <= 1:\n        return arr\n    pivot = arr[0]\n    return quicksort([x for x in arr[1:] if x < pivot]) + [pivot] + quicksort([x for x in arr[1:] if x >= pivot])"}
{"text": "async function fetchData(url) {\n    const response = await fetch(url);\n    return response.json();\n}"}
{"text": "SELECT name, age FROM users WHERE age > 18 ORDER BY name;"}
{"text": "def binary_search(arr, target):\n    left, right = 0, len(arr) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == target:\n            return mid\n        elif arr[mid] < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return -1"}
{"text": "def fibonacci(n):\n    if n <= 1:\n        return n\n    return fibonacci(n-1) + fibonacci(n-2)"}
{"text": "class Stack:\n    def __init__(self):\n        self.items = []\n    def push(self, item):\n        self.items.append(item)"}
{"text": "import numpy as np\n\ndef matrix_multiply(A, B):\n    return np.dot(A, B)"}
{"text": "for i in range(10):\n    if i % 2 == 0:\n        print(f'{i} is even')"}
{"text": "def quicksort(arr):\n    if len(arr) <= 1:\n        return arr\n    pivot = arr[0]\n    return quicksort([x for x in arr[1:] if x < pivot]) + [pivot] + quicksort([x for x in arr[1:] if x >= pivot])"}
{"text": "async function fetchData(url) {\n    const response = await fetch(url);\n    return response.json();\n}"}
{"text": "SELECT name, age FROM users WHERE age > 18 ORDER BY name;"}
{"text": "def binary_search(arr, target):\n    left, right = 0, len(arr) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == target:\n            return mid\n        elif arr[mid] < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return -1"}
{"text": "def fibonacci(n):\n    if n <= 1:\n        return n\n    return fibonacci(n-1) + fibonacci(n-2)"}
{"text": "class Stack:\n    def __init__(self):\n        self.items = []\n    def push(self, item):\n        self.items.append(item)"}
{"text": "import numpy as np\n\ndef matrix_multiply(A, B):\n    return np.dot(A, B)"}
{"text": "for i in range(10):\n    if i % 2 == 0:\n        print(f'{i} is even')"}
{"text": "def quicksort(arr):\n    if len(arr) <= 1:\n        return arr\n    pivot = arr[0]\n    return quicksort([x for x in arr[1:] if x < pivot]) + [pivot] + quicksort([x for x in arr[1:] if x >= pivot])"}
{"text": "async function fetchData(url) {\n    const response = await fetch(url);\n    return response.json();\n}"}
{"text": "SELECT name, age FROM users WHERE age > 18 ORDER BY name;"}
{"text": "def binary_search(arr, target):\n    left, right = 0, len(arr) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == target:\n            return mid\n        elif arr[mid] < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return -1"}
{"text": "def fibonacci(n):\n    if n <= 1:\n        return n\n    return fibonacci(n-1) + fibonacci(n-2)"}
{"text": "class Stack:\n    def __init__(self):\n        self.items = []\n    def push(self, item):\n        self.items.append(item)"}
{"text": "import numpy as np\n\ndef matrix_multiply(A, B):\n    return np.dot(A, B)"}
{"text": "for i in range(10):\n    if i % 2 == 0:\n        print(f'{i} is even')"}
{"text": "def quicksort(arr):\n    if len(arr) <= 1:\n        return arr\n    pivot = arr[0]\n    return quicksort([x for x in arr[1:] if x < pivot]) + [pivot] + quicksort([x for x in arr[1:] if x >= pivot])"}
{"text": "async function fetchData(url) {\n    const response = await fetch(url);\n    return response.json();\n}"}
{"text": "SELECT name, age FROM users WHERE age > 18 ORDER BY name;"}
{"text": "def binary_search(arr, target):\n    left, right = 0, len(arr) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == target:\n            return mid\n        elif arr[mid] < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return -1"}
{"text": "def fibonacci(n):\n    if n <= 1:\n        return n\n    return fibonacci(n-1) + fibonacci(n-2)"}
{"text": "class Stack:\n    def __init__(self):\n        self.items = []\n    def push(self, item):\n        self.items.append(item)"}
{"text": "import numpy as np\n\ndef matrix_multiply(A, B):\n    return np.dot(A, B)"}
{"text": "for i in range(10):\n    if i % 2 == 0:\n        print(f'{i} is even')"}
{"text": "def quicksort(arr):\n    if len(arr) <= 1:\n        return arr\n    pivot = arr[0]\n    return quicksort([x for x in arr[1:] if x < pivot]) + [pivot] + quicksort([x for x in arr[1:] if x >= pivot])"}
{"text": "async function fetchData(url) {\n    const response = await fetch(url);\n    return response.json();\n}"}
{"text": "SELECT name, age FROM users WHERE age > 18 ORDER BY name;"}
{"text": "def binary_search(arr, target):\n    left, right = 0, len(arr) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == target:\n            return mid\n        elif arr[mid] < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return -1"}
{"text": "def fibonacci(n):\n    if n <= 1:\n        return n\n    return fibonacci(n-1) + fibonacci(n-2)"}
{"text": "class Stack:\n    def __init__(self):\n        self.items = []\n    def push(self, item):\n        self.items.append(item)"}
{"text": "import numpy as np\n\ndef matrix_multiply(A, B):\n    return np.dot(A, B)"}
{"text": "for i in range(10):\n    if i % 2 == 0:\n        print(f'{i} is even')"}
{"text": "def quicksort(arr):\n    if len(arr) <= 1:\n        return arr\n    pivot = arr[0]\n    return quicksort([x for x in arr[1:] if x < pivot]) + [pivot] + quicksort([x for x in arr[1:] if x >= pivot])"}
{"text": "async function fetchData(url) {\n    const response = await fetch(url);\n    return response.json();\n}"}
{"text": "SELECT name, age FROM users WHERE age > 18 ORDER BY name;"}
{"text": "def binary_search(arr, target):\n    left, right = 0, len(arr) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == target:\n            return mid\n        elif arr[mid] < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return -1"}
{"text": "def fibonacci(n):\n    if n <= 1:\n        return n\n    return fibonacci(n-1) + fibonacci(n-2)"}
{"text": "class Stack:\n    def __init__(self):\n        self.items = []\n    def push(self, item):\n        self.items.append(item)"}
{"text": "import numpy as np\n\ndef matrix_multiply(A, B):\n    return np.dot(A, B)"}
{"text": "for i in range(10):\n    if i % 2 == 0:\n        print(f'{i} is even')"}
{"text": "def quicksort(arr):\n    if len(arr) <= 1:\n        return arr\n    pivot = arr[0]\n    return quicksort([x for x in arr[1:] if x < pivot]) + [pivot] + quicksort([x for x in arr[1:] if x >= pivot])"}
{"text": "async function fetchData(url) {\n    const response = await fetch(url);\n    return response.json();\n}"}
{"text": "SELECT name, age FROM users WHERE age > 18 ORDER BY name;"}
{"text": "def binary_search(arr, target):\n    left, right = 0, len(arr) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == target:\n            return mid\n        elif arr[mid] < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return -1"}
{"text": "def fibonacci(n):\n    if n <= 1:\n        return n\n    return fibonacci(n-1) + fibonacci(n-2)"}
{"text": "class Stack:\n    def __init__(self):\n        self.items = []\n    def push(self, item):\n        self.items.append(item)"}
{"text": "import numpy as np\n\ndef matrix_multiply(A, B):\n    return np.dot(A, B)"}
{"text": "for i in range(10):\n    if i % 2 == 0:\n        print(f'{i} is even')"}
{"text": "def quicksort(arr):\n    if len(arr) <= 1:\n        return arr\n    pivot = arr[0]\n    return quicksort([x for x in arr[1:] if x < pivot]) + [pivot] + quicksort([x for x in arr[1:] if x >= pivot])"}
{"text": "async function fetchData(url) {\n    const response = await fetch(url);\n    return response.json();\n}"}
{"text": "SELECT name, age FROM users WHERE age > 18 ORDER BY name;"}
{"text": "def binary_search(arr, target):\n    left, right = 0, len(arr) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == target:\n            return mid\n        elif arr[mid] < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return -1"}
{"text": "def fibonacci(n):\n    if n <= 1:\n        return n\n    return fibonacci(n-1) + fibonacci(n-2)"}
{"text": "class Stack:\n    def __init__(self):\n        self.items = []\n    def push(self, item):\n        self.items.append(item)"}
{"text": "import numpy as np\n\ndef matrix_multiply(A, B):\n    return np.dot(A, B)"}
{"text": "for i in range(10):\n    if i % 2 == 0:\n        print(f'{i} is even')"}
{"text": "def quicksort(arr):\n    if len(arr) <= 1:\n        return arr\n    pivot = arr[0]\n    return quicksort([x for x in arr[1:] if x < pivot]) + [pivot] + quicksort([x for x in arr[1:] if x >= pivot])"}
{"text": "async function fetchData(url) {\n    const response = await fetch(url);\n    return response.json();\n}"}
{"text": "SELECT name, age FROM users WHERE age > 18 ORDER BY name;"}
{"text": "def binary_search(arr, target):\n    left, right = 0, len(arr) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == target:\n            return mid\n        elif arr[mid] < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return -1"}
{"text": "def fibonacci(n):\n    if n <= 1:\n        return n\n    return fibonacci(n-1) + fibonacci(n-2)"}
{"text": "class Stack:\n    def __init__(self):\n        self.items = []\n    def push(self, item):\n        self.items.append(item)"}
{"text": "import numpy as np\n\ndef matrix_multiply(A, B):\n    return np.dot(A, B)"}
{"text": "for i in range(10):\n    if i % 2 == 0:\n        print(f'{i} is even')"}
{"text": "def quicksort(arr):\n    if len(arr) <= 1:\n        return arr\n    pivot = arr[0]\n    return quicksort([x for x in arr[1:] if x < pivot]) + [pivot] + quicksort([x for x in arr[1:] if x >= pivot])"}
{"text": "async function fetchData(url) {\n    const response = await fetch(url);\n    return response.json();\n}"}
{"text": "SELECT name, age FROM users WHERE age > 18 ORDER BY name;"}
{"text": "def binary_search(arr, target):\n    left, right = 0, len(arr) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == target:\n            return mid\n        elif arr[mid] < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return -1"}
{"text": "def fibonacci(n):\n    if n <= 1:\n        return n\n    return fibonacci(n-1) + fibonacci(n-2)"}
{"text": "class Stack:\n    def __init__(self):\n        self.items = []\n    def push(self, item):\n        self.items.append(item)"}
{"text": "import numpy as np\n\ndef matrix_multiply(A, B):\n    return np.dot(A, B)"}
{"text": "for i in range(10):\n    if i % 2 == 0:\n        print(f'{i} is even')"}
{"text": "def quicksort(arr):\n    if len(arr) <= 1:\n        return arr\n    pivot = arr[0]\n    return quicksort([x for x in arr[1:] if x < pivot]) + [pivot] + quicksort([x for x in arr[1:] if x >= pivot])"}
{"text": "async function fetchData(url) {\n    const response = await fetch(url);\n    return response.json();\n}"}
{"text": "SELECT name, age FROM users WHERE age > 18 ORDER BY name;"}
{"text": "def binary_search(arr, target):\n    left, right = 0, len(arr) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == target:\n            return mid\n        elif arr[mid] < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return -1"}
{"text": "def fibonacci(n):\n    if n <= 1:\n        return n\n    return fibonacci(n-1) + fibonacci(n-2)"}
{"text": "class Stack:\n    def __init__(self):\n        self.items = []\n    def push(self, item):\n        self.items.append(item)"}
{"text": "import numpy as np\n\ndef matrix_multiply(A, B):\n    return np.dot(A, B)"}
{"text": "for i in range(10):\n    if i % 2 == 0:\n        print(f'{i} is even')"}
{"text": "def quicksort(arr):\n    if len(arr) <= 1:\n        return arr\n    pivot = arr[0]\n    return quicksort([x for x in arr[1:] if x < pivot]) + [pivot] + quicksort([x for x in arr[1:] if x >= pivot])"}
{"text": "async function fetchData(url) {\n    const response = await fetch(url);\n    return response.json();\n}"}
{"text": "SELECT name, age FROM users WHERE age > 18 ORDER BY name;"}
{"text": "def binary_search(arr, target):\n    left, right = 0, len(arr) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == target:\n            return mid\n        elif arr[mid] < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return -1"}
{"text": "def fibonacci(n):\n    if n <= 1:\n        return n\n    return fibonacci(n-1) + fibonacci(n-2)"}
{"text": "class Stack:\n    def __init__(self):\n        self.items = []\n    def push(self, item):\n        self.items.append(item)"}
{"text": "import numpy as np\n\ndef matrix_multiply(A, B):\n    return np.dot(A, B)"}
{"text": "for i in range(10):\n    if i % 2 == 0:\n        print(f'{i} is even')"}
{"text": "def quicksort(arr):\n    if len(arr) <= 1:\n        return arr\n    pivot = arr[0]\n    return quicksort([x for x in arr[1:] if x < pivot]) + [pivot] + quicksort([x for x in arr[1:] if x >= pivot])"}
{"text": "async function fetchData(url) {\n    const response = await fetch(url);\n    return response.json();\n}"}
{"text": "SELECT name, age FROM users WHERE age > 18 ORDER BY name;"}
{"text": "def binary_search(arr, target):\n    left, right = 0, len(arr) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == target:\n            return mid\n        elif arr[mid] < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return -1"}
{"text": "def fibonacci(n):\n    if n <= 1:\n        return n\n    return fibonacci(n-1) + fibonacci(n-2)"}
{"text": "class Stack:\n    def __init__(self):\n        self.items = []\n    def push(self, item):\n        self.items.append(item)"}
{"text": "import numpy as np\n\ndef matrix_multiply(A, B):\n    return np.dot(A, B)"}
{"text": "for i in range(10):\n    if i % 2 == 0:\n        print(f'{i} is even')"}
{"text": "def quicksort(arr):\n    if len(arr) <= 1:\n        return arr\n    pivot = arr[0]\n    return quicksort([x for x in arr[1:] if x < pivot]) + [pivot] + quicksort([x for x in arr[1:] if x >= pivot])"}
{"text": "async function fetchData(url) {\n    const response = await fetch(url);\n    return response.json();\n}"}
{"text": "SELECT name, age FROM users WHERE age > 18 ORDER BY name;"}
{"text": "def binary_search(arr, target):\n    left, right = 0, len(arr) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == target:\n            return mid\n        elif arr[mid] < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return -1"}
{"text": "def fibonacci(n):\n    if n <= 1:\n        return n\n    return fibonacci(n-1) + fibonacci(n-2)"}
{"text": "class Stack:\n    def __init__(self):\n        self.items = []\n    def push(self, item):\n        self.items.append(item)"}
{"text": "import numpy as np\n\ndef matrix_multiply(A, B):\n    return np.dot(A, B)"}
{"text": "for i in range(10):\n    if i % 2 == 0:\n        print(f'{i} is even')"}
{"text": "def quicksort(arr):\n    if len(arr) <= 1:\n        return arr\n    pivot = arr[0]\n    return quicksort([x for x in arr[1:] if x < pivot]) + [pivot] + quicksort([x for x in arr[1:] if x >= pivot])"}
{"text": "async function fetchData(url) {\n    const response = await fetch(url);\n    return response.json();\n}"}
{"text": "SELECT name, age FROM users WHERE age > 18 ORDER BY name;"}
{"text": "def binary_search(arr, target):\n    left, right = 0, len(arr) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == target:\n            return mid\n        elif arr[mid] < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return -1"}
{"text": "def fibonacci(n):\n    if n <= 1:\n        return n\n    return fibonacci(n-1) + fibonacci(n-2)"}
{"text": "class Stack:\n    def __init__(self):\n        self.items = []\n    def push(self, item):\n        self.items.append(item)"}
{"text": "import numpy as np\n\ndef matrix_multiply(A, B):\n    return np.dot(A, B)"}
{"text": "for i in range(10):\n    if i % 2 == 0:\n        print(f'{i} is even')"}
{"text": "def quicksort(arr):\n    if len(arr) <= 1:\n        return arr\n    pivot = arr[0]\n    return quicksort([x for x in arr[1:] if x < pivot]) + [pivot] + quicksort([x for x in arr[1:] if x >= pivot])"}
{"text": "async function fetchData(url) {\n    const response = await fetch(url);\n    return response.json();\n}"}
{"text": "SELECT name, age FROM users WHERE age > 18 ORDER BY name;"}
{"text": "def binary_search(arr, target):\n    left, right = 0, len(arr) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == target:\n            return mid\n        elif arr[mid] < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return -1"}
{"text": "def fibonacci(n):\n    if n <= 1:\n        return n\n    return fibonacci(n-1) + fibonacci(n-2)"}
{"text": "class Stack:\n    def __init__(self):\n        self.items = []\n    def push(self, item):\n        self.items.append(item)"}
{"text": "import numpy as np\n\ndef matrix_multiply(A, B):\n    return np.dot(A, B)"}
{"text": "for i in range(10):\n    if i % 2 == 0:\n        print(f'{i} is even')"}
{"text": "def quicksort(arr):\n    if len(arr) <= 1:\n        return arr\n    pivot = arr[0]\n    return quicksort([x for x in arr[1:] if x < pivot]) + [pivot] + quicksort([x for x in arr[1:] if x >= pivot])"}
{"text": "async function fetchData(url) {\n    const response = await fetch(url);\n    return response.json();\n}"}
{"text": "SELECT name, age FROM users WHERE age > 18 ORDER BY name;"}
{"text": "def binary_search(arr, target):\n    left, right = 0, len(arr) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == target:\n            return mid\n        elif arr[mid] < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return -1"}
{"text": "def fibonacci(n):\n    if n <= 1:\n        return n\n    return fibonacci(n-1) + fibonacci(n-2)"}
{"text": "class Stack:\n    def __init__(self):\n        self.items = []\n    def push(self, item):\n        self.items.append(item)"}
{"text": "import numpy as np\n\ndef matrix_multiply(A, B):\n    return np.dot(A, B)"}
{"text": "for i in range(10):\n    if i % 2 == 0:\n        print(f'{i} is even')"}
{"text": "def quicksort(arr):\n    if len(arr) <= 1:\n        return arr\n    pivot = arr[0]\n    return quicksort([x for x in arr[1:] if x < pivot]) + [pivot] + quicksort([x for x in arr[1:] if x >= pivot])"}
{"text": "async function fetchData(url) {\n    const response = await fetch(url);\n    return response.json();\n}"}
{"text": "SELECT name, age FROM users WHERE age > 18 ORDER BY name;"}
{"text": "def binary_search(arr, target):\n    left, right = 0, len(arr) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == target:\n            return mid\n        elif arr[mid] < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return -1"}
{"text": "def fibonacci(n):\n    if n <= 1:\n        return n\n    return fibonacci(n-1) + fibonacci(n-2)"}
{"text": "class Stack:\n    def __init__(self):\n        self.items = []\n    def push(self, item):\n        self.items.append(item)"}
{"text": "import numpy as np\n\ndef matrix_multiply(A, B):\n    return np.dot(A, B)"}
{"text": "for i in range(10):\n    if i % 2 == 0:\n        print(f'{i} is even')"}
{"text": "def quicksort(arr):\n    if len(arr) <= 1:\n        return arr\n    pivot = arr[0]\n    return quicksort([x for x in arr[1:] if x < pivot]) + [pivot] + quicksort([x for x in arr[1:] if x >= pivot])"}
{"text": "async function fetchData(url) {\n    const response = await fetch(url);\n    return response.json();\n}"}
{"text": "SELECT name, age FROM users WHERE age > 18 ORDER BY name;"}
{"text": "def binary_search(arr, target):\n    left, right = 0, len(arr) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == target:\n            return mid\n        elif arr[mid] < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return -1"}
{"text": "def fibonacci(n):\n    if n <= 1:\n        return n\n    return fibonacci(n-1) + fibonacci(n-2)"}
{"text": "class Stack:\n    def __init__(self):\n        self.items = []\n    def push(self, item):\n        self.items.append(item)"}
{"text": "import numpy as np\n\ndef matrix_multiply(A, B):\n    return np.dot(A, B)"}
{"text": "for i in range(10):\n    if i % 2 == 0:\n        print(f'{i} is even')"}
{"text": "def quicksort(arr):\n    if len(arr) <= 1:\n        return arr\n    pivot = arr[0]\n    return quicksort([x for x in arr[1:] if x < pivot]) + [pivot] + quicksort([x for x in arr[1:] if x >= pivot])"}
{"text": "async function fetchData(url) {\n    const response = await fetch(url);\n    return response.json();\n}"}
{"text": "SELECT name, age FROM users WHERE age > 18 ORDER BY name;"}
{"text": "def binary_search(arr, target):\n    left, right = 0, len(arr) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == target:\n            return mid\n        elif arr[mid] < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return -1"}
{"text": "def fibonacci(n):\n    if n <= 1:\n        return n\n    return fibonacci(n-1) + fibonacci(n-2)"}
{"text": "class Stack:\n    def __init__(self):\n        self.items = []\n    def push(self, item):\n        self.items.append(item)"}
{"text": "import numpy as np\n\ndef matrix_multiply(A, B):\n    return np.dot(A, B)"}
{"text": "for i in range(10):\n    if i % 2 == 0:\n        print(f'{i} is even')"}
{"text": "def quicksort(arr):\n    if len(arr) <= 1:\n        return arr\n    pivot = arr[0]\n    return quicksort([x for x in arr[1:] if x < pivot]) + [pivot] + quicksort([x for x in arr[1:] if x >= pivot])"}
{"text": "async function fetchData(url) {\n    const response = await fetch(url);\n    return response.json();\n}"}
{"text": "SELECT name, age FROM users WHERE age > 18 ORDER BY name;"}
{"text": "def binary_search(arr, target):\n    left, right = 0, len(arr) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == target:\n            return mid\n        elif arr[mid] < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return -1"}
{"text": "def fibonacci(n):\n    if n <= 1:\n        return n\n    return fibonacci(n-1) + fibonacci(n-2)"}
{"text": "class Stack:\n    def __init__(self):\n        self.items = []\n    def push(self, item):\n        self.items.append(item)"}
{"text": "import numpy as np\n\ndef matrix_multiply(A, B):\n    return np.dot(A, B)"}
{"text": "for i in range(10):\n    if i % 2 == 0:\n        print(f'{i} is even')"}
{"text": "def quicksort(arr):\n    if len(arr) <= 1:\n        return arr\n    pivot = arr[0]\n    return quicksort([x for x in arr[1:] if x < pivot]) + [pivot] + quicksort([x for x in arr[1:] if x >= pivot])"}
{"text": "async function fetchData(url) {\n    const response = await fetch(url);\n    return response.json();\n}"}
{"text": "SELECT name, age FROM users WHERE age > 18 ORDER BY name;"}
{"text": "def binary_search(arr, target):\n    left, right = 0, len(arr) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == target:\n            return mid\n        elif arr[mid] < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return -1"}
{"text": "def fibonacci(n):\n    if n <= 1:\n        return n\n    return fibonacci(n-1) + fibonacci(n-2)"}
{"text": "class Stack:\n    def __init__(self):\n        self.items = []\n    def push(self, item):\n        self.items.append(item)"}
{"text": "import numpy as np\n\ndef matrix_multiply(A, B):\n    return np.dot(A, B)"}
{"text": "for i in range(10):\n    if i % 2 == 0:\n        print(f'{i} is even')"}
{"text": "def quicksort(arr):\n    if len(arr) <= 1:\n        return arr\n    pivot = arr[0]\n    return quicksort([x for x in arr[1:] if x < pivot]) + [pivot] + quicksort([x for x in arr[1:] if x >= pivot])"}
{"text": "async function fetchData(url) {\n    const response = await fetch(url);\n    return response.json();\n}"}
{"text": "SELECT name, age FROM users WHERE age > 18 ORDER BY name;"}
{"text": "def binary_search(arr, target):\n    left, right = 0, len(arr) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == target:\n            return mid\n        elif arr[mid] < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return -1"}
{"text": "def fibonacci(n):\n    if n <= 1:\n        return n\n    return fibonacci(n-1) + fibonacci(n-2)"}
{"text": "class Stack:\n    def __init__(self):\n        self.items = []\n    def push(self, item):\n        self.items.append(item)"}
{"text": "import numpy as np\n\ndef matrix_multiply(A, B):\n    return np.dot(A, B)"}
{"text": "for i in range(10):\n    if i % 2 == 0:\n        print(f'{i} is even')"}
{"text": "def quicksort(arr):\n    if len(arr) <= 1:\n        return arr\n    pivot = arr[0]\n    return quicksort([x for x in arr[1:] if x < pivot]) + [pivot] + quicksort([x for x in arr[1:] if x >= pivot])"}
{"text": "async function fetchData(url) {\n    const response = await fetch(url);\n    return response.json();\n}"}
{"text": "SELECT name, age FROM users WHERE age > 18 ORDER BY name;"}
{"text": "def binary_search(arr, target):\n    left, right = 0, len(arr) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == target:\n            return mid\n        elif arr[mid] < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return -1"}
{"text": "def fibonacci(n):\n    if n <= 1:\n        return n\n    return fibonacci(n-1) + fibonacci(n-2)"}
{"text": "class Stack:\n    def __init__(self):\n        self.items = []\n    def push(self, item):\n        self.items.append(item)"}
{"text": "import numpy as np\n\ndef matrix_multiply(A, B):\n    return np.dot(A, B)"}
{"text": "for i in range(10):\n    if i % 2 == 0:\n        print(f'{i} is even')"}
{"text": "def quicksort(arr):\n    if len(arr) <= 1:\n        return arr\n    pivot = arr[0]\n    return quicksort([x for x in arr[1:] if x < pivot]) + [pivot] + quicksort([x for x in arr[1:] if x >= pivot])"}
{"text": "async function fetchData(url) {\n    const response = await fetch(url);\n    return response.json();\n}"}
{"text": "SELECT name, age FROM users WHERE age > 18 ORDER BY name;"}
{"text": "def binary_search(arr, target):\n    left, right = 0, len(arr) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == target:\n            return mid\n        elif arr[mid] < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return -1"}
{"text": "def fibonacci(n):\n    if n <= 1:\n        return n\n    return fibonacci(n-1) + fibonacci(n-2)"}
{"text": "class Stack:\n    def __init__(self):\n        self.items = []\n    def push(self, item):\n        self.items.append(item)"}
{"text": "import numpy as np\n\ndef matrix_multiply(A, B):\n    return np.dot(A, B)"}
{"text": "for i in range(10):\n    if i % 2 == 0:\n        print(f'{i} is even')"}
{"text": "def quicksort(arr):\n    if len(arr) <= 1:\n        return arr\n    pivot = arr[0]\n    return quicksort([x for x in arr[1:] if x < pivot]) + [pivot] + quicksort([x for x in arr[1:] if x >= pivot])"}
{"text": "async function fetchData(url) {\n    const response = await fetch(url);\n    return response.json();\n}"}
{"text": "SELECT name, age FROM users WHERE age > 18 ORDER BY name;"}
{"text": "def binary_search(arr, target):\n    left, right = 0, len(arr) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == target:\n            return mid\n        elif arr[mid] < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return -1"}
{"text": "def fibonacci(n):\n    if n <= 1:\n        return n\n    return fibonacci(n-1) + fibonacci(n-2)"}
{"text": "class Stack:\n    def __init__(self):\n        self.items = []\n    def push(self, item):\n        self.items.append(item)"}
{"text": "import numpy as np\n\ndef matrix_multiply(A, B):\n    return np.dot(A, B)"}
{"text": "for i in range(10):\n    if i % 2 == 0:\n        print(f'{i} is even')"}
{"text": "def quicksort(arr):\n    if len(arr) <= 1:\n        return arr\n    pivot = arr[0]\n    return quicksort([x for x in arr[1:] if x < pivot]) + [pivot] + quicksort([x for x in arr[1:] if x >= pivot])"}
{"text": "async function fetchData(url) {\n    const response = await fetch(url);\n    return response.json();\n}"}
{"text": "SELECT name, age FROM users WHERE age > 18 ORDER BY name;"}
{"text": "def binary_search(arr, target):\n    left, right = 0, len(arr) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == target:\n            return mid\n        elif arr[mid] < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return -1"}
{"text": "def fibonacci(n):\n    if n <= 1:\n        return n\n    return fibonacci(n-1) + fibonacci(n-2)"}
{"text": "class Stack:\n    def __init__(self):\n        self.items = []\n    def push(self, item):\n        self.items.append(item)"}
{"text": "import numpy as np\n\ndef matrix_multiply(A, B):\n    return np.dot(A, B)"}
{"text": "for i in range(10):\n    if i % 2 == 0:\n        print(f'{i} is even')"}
{"text": "def quicksort(arr):\n    if len(arr) <= 1:\n        return arr\n    pivot = arr[0]\n    return quicksort([x for x in arr[1:] if x < pivot]) + [pivot] + quicksort([x for x in arr[1:] if x >= pivot])"}
{"text": "async function fetchData(url) {\n    const response = await fetch(url);\n    return response.json();\n}"}
{"text": "SELECT name, age FROM users WHERE age > 18 ORDER BY name;"}
{"text": "def binary_search(arr, target):\n    left, right = 0, len(arr) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == target:\n            return mid\n        elif arr[mid] < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return -1"}
{"text": "def fibonacci(n):\n    if n <= 1:\n        return n\n    return fibonacci(n-1) + fibonacci(n-2)"}
{"text": "class Stack:\n    def __init__(self):\n        self.items = []\n    def push(self, item):\n        self.items.append(item)"}
{"text": "import numpy as np\n\ndef matrix_multiply(A, B):\n    return np.dot(A, B)"}
{"text": "for i in range(10):\n    if i % 2 == 0:\n        print(f'{i} is even')"}
{"text": "def quicksort(arr):\n    if len(arr) <= 1:\n        return arr\n    pivot = arr[0]\n    return quicksort([x for x in arr[1:] if x < pivot]) + [pivot] + quicksort([x for x in arr[1:] if x >= pivot])"}
{"text": "async function fetchData(url) {\n    const response = await fetch(url);\n    return response.json();\n}"}
{"text": "SELECT name, age FROM users WHERE age > 18 ORDER BY name;"}
{"text": "def binary_search(arr, target):\n    left, right = 0, len(arr) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == target:\n            return mid\n        elif arr[mid] < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return -1"}
{"text": "def fibonacci(n):\n    if n <= 1:\n        return n\n    return fibonacci(n-1) + fibonacci(n-2)"}
{"text": "class Stack:\n    def __init__(self):\n        self.items = []\n    def push(self, item):\n        self.items.append(item)"}
{"text": "import numpy as np\n\ndef matrix_multiply(A, B):\n    return np.dot(A, B)"}
{"text": "for i in range(10):\n    if i % 2 == 0:\n        print(f'{i} is even')"}
{"text": "def quicksort(arr):\n    if len(arr) <= 1:\n        return arr\n    pivot = arr[0]\n    return quicksort([x for x in arr[1:] if x < pivot]) + [pivot] + quicksort([x for x in arr[1:] if x >= pivot])"}
{"text": "async function fetchData(url) {\n    const response = await fetch(url);\n    return response.json();\n}"}
{"text": "SELECT name, age FROM users WHERE age > 18 ORDER BY name;"}
{"text": "def binary_search(arr, target):\n    left, right = 0, len(arr) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == target:\n            return mid\n        elif arr[mid] < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return -1"}
{"text": "def fibonacci(n):\n    if n <= 1:\n        return n\n    return fibonacci(n-1) + fibonacci(n-2)"}
{"text": "class Stack:\n    def __init__(self):\n        self.items = []\n    def push(self, item):\n        self.items.append(item)"}
{"text": "import numpy as np\n\ndef matrix_multiply(A, B):\n    return np.dot(A, B)"}
{"text": "for i in range(10):\n    if i % 2 == 0:\n        print(f'{i} is even')"}
{"text": "def quicksort(arr):\n    if len(arr) <= 1:\n        return arr\n    pivot = arr[0]\n    return quicksort([x for x in arr[1:] if x < pivot]) + [pivot] + quicksort([x for x in arr[1:] if x >= pivot])"}
{"text": "async function fetchData(url) {\n    const response = await fetch(url);\n    return response.json();\n}"}
{"text": "SELECT name, age FROM users WHERE age > 18 ORDER BY name;"}
{"text": "def binary_search(arr, target):\n    left, right = 0, len(arr) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == target:\n            return mid\n        elif arr[mid] < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return -1"}
{"text": "def fibonacci(n):\n    if n <= 1:\n        return n\n    return fibonacci(n-1) + fibonacci(n-2)"}
{"text": "class Stack:\n    def __init__(self):\n        self.items = []\n    def push(self, item):\n        self.items.append(item)"}
{"text": "import numpy as np\n\ndef matrix_multiply(A, B):\n    return np.dot(A, B)"}
{"text": "for i in range(10):\n    if i % 2 == 0:\n        print(f'{i} is even')"}
{"text": "def quicksort(arr):\n    if len(arr) <= 1:\n        return arr\n    pivot = arr[0]\n    return quicksort([x for x in arr[1:] if x < pivot]) + [pivot] + quicksort([x for x in arr[1:] if x >= pivot])"}
{"text": "async function fetchData(url) {\n    const response = await fetch(url);\n    return response.json();\n}"}
{"text": "SELECT name, age FROM users WHERE age > 18 ORDER BY name;"}
{"text": "def binary_search(arr, target):\n    left, right = 0, len(arr) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == target:\n            return mid\n        elif arr[mid] < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return -1"}
{"text": "def fibonacci(n):\n    if n <= 1:\n        return n\n    return fibonacci(n-1) + fibonacci(n-2)"}
{"text": "class Stack:\n    def __init__(self):\n        self.items = []\n    def push(self, item):\n        self.items.append(item)"}
{"text": "import numpy as np\n\ndef matrix_multiply(A, B):\n    return np.dot(A, B)"}
{"text": "for i in range(10):\n    if i % 2 == 0:\n        print(f'{i} is even')"}
{"text": "def quicksort(arr):\n    if len(arr) <= 1:\n        return arr\n    pivot = arr[0]\n    return quicksort([x for x in arr[1:] if x < pivot]) + [pivot] + quicksort([x for x in arr[1:] if x >= pivot])"}
{"text": "async function fetchData(url) {\n    const response = await fetch(url);\n    return response.json();\n}"}
{"text": "SELECT name, age FROM users WHERE age > 18 ORDER BY name;"}
{"text": "def binary_search(arr, target):\n    left, right = 0, len(arr) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == target:\n            return mid\n        elif arr[mid] < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return -1"}
{"text": "def fibonacci(n):\n    if n <= 1:\n        return n\n    return fibonacci(n-1) + fibonacci(n-2)"}
{"text": "class Stack:\n    def __init__(self):\n        self.items = []\n    def push(self, item):\n        self.items.append(item)"}
{"text": "import numpy as np\n\ndef matrix_multiply(A, B):\n    return np.dot(A, B)"}
{"text": "for i in range(10):\n    if i % 2 == 0:\n        print(f'{i} is even')"}
{"text": "def quicksort(arr):\n    if len(arr) <= 1:\n        return arr\n    pivot = arr[0]\n    return quicksort([x for x in arr[1:] if x < pivot]) + [pivot] + quicksort([x for x in arr[1:] if x >= pivot])"}
{"text": "async function fetchData(url) {\n    const response = await fetch(url);\n    return response.json();\n}"}
{"text": "SELECT name, age FROM users WHERE age > 18 ORDER BY name;"}
{"text": "def binary_search(arr, target):\n    left, right = 0, len(arr) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == target:\n            return mid\n        elif arr[mid] < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return -1"}
{"text": "def fibonacci(n):\n    if n <= 1:\n        return n\n    return fibonacci(n-1) + fibonacci(n-2)"}
{"text": "class Stack:\n    def __init__(self):\n        self.items = []\n    def push(self, item):\n        self.items.append(item)"}
{"text": "import numpy as np\n\ndef matrix_multiply(A, B):\n    return np.dot(A, B)"}
{"text": "for i in range(10):\n    if i % 2 == 0:\n        print(f'{i} is even')"}
{"text": "def quicksort(arr):\n    if len(arr) <= 1:\n        return arr\n    pivot = arr[0]\n    return quicksort([x for x in arr[1:] if x < pivot]) + [pivot] + quicksort([x for x in arr[1:] if x >= pivot])"}
{"text": "async function fetchData(url) {\n    const response = await fetch(url);\n    return response.json();\n}"}
{"text": "SELECT name, age FROM users WHERE age > 18 ORDER BY name;"}
{"text": "def binary_search(arr, target):\n    left, right = 0, len(arr) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == target:\n            return mid\n        elif arr[mid] < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return -1"}
{"text": "def fibonacci(n):\n    if n <= 1:\n        return n\n    return fibonacci(n-1) + fibonacci(n-2)"}
{"text": "class Stack:\n    def __init__(self):\n        self.items = []\n    def push(self, item):\n        self.items.append(item)"}
{"text": "import numpy as np\n\ndef matrix_multiply(A, B):\n    return np.dot(A, B)"}
{"text": "for i in range(10):\n    if i % 2 == 0:\n        print(f'{i} is even')"}
{"text": "def quicksort(arr):\n    if len(arr) <= 1:\n        return arr\n    pivot = arr[0]\n    return quicksort([x for x in arr[1:] if x < pivot]) + [pivot] + quicksort([x for x in arr[1:] if x >= pivot])"}
{"text": "async function fetchData(url) {\n    const response = await fetch(url);\n    return response.json();\n}"}
{"text": "SELECT name, age FROM users WHERE age > 18 ORDER BY name;"}
{"text": "def binary_search(arr, target):\n    left, right = 0, len(arr) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == target:\n            return mid\n        elif arr[mid] < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return -1"}
{"text": "def fibonacci(n):\n    if n <= 1:\n        return n\n    return fibonacci(n-1) + fibonacci(n-2)"}
{"text": "class Stack:\n    def __init__(self):\n        self.items = []\n    def push(self, item):\n        self.items.append(item)"}
{"text": "import numpy as np\n\ndef matrix_multiply(A, B):\n    return np.dot(A, B)"}
{"text": "for i in range(10):\n    if i % 2 == 0:\n        print(f'{i} is even')"}
{"text": "def quicksort(arr):\n    if len(arr) <= 1:\n        return arr\n    pivot = arr[0]\n    return quicksort([x for x in arr[1:] if x < pivot]) + [pivot] + quicksort([x for x in arr[1:] if x >= pivot])"}
{"text": "async function fetchData(url) {\n    const response = await fetch(url);\n    return response.json();\n}"}
{"text": "SELECT name, age FROM users WHERE age > 18 ORDER BY name;"}
{"text": "def binary_search(arr, target):\n    left, right = 0, len(arr) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == target:\n            return mid\n        elif arr[mid] < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return -1"}
{"text": "def fibonacci(n):\n    if n <= 1:\n        return n\n    return fibonacci(n-1) + fibonacci(n-2)"}
{"text": "class Stack:\n    def __init__(self):\n        self.items = []\n    def push(self, item):\n        self.items.append(item)"}
{"text": "import numpy as np\n\ndef matrix_multiply(A, B):\n    return np.dot(A, B)"}
{"text": "for i in range(10):\n    if i % 2 == 0:\n        print(f'{i} is even')"}
{"text": "def quicksort(arr):\n    if len(arr) <= 1:\n        return arr\n    pivot = arr[0]\n    return quicksort([x for x in arr[1:] if x < pivot]) + [pivot] + quicksort([x for x in arr[1:] if x >= pivot])"}
{"text": "async function fetchData(url) {\n    const response = await fetch(url);\n    return response.json();\n}"}
{"text": "SELECT name, age FROM users WHERE age > 18 ORDER BY name;"}
{"text": "def binary_search(arr, target):\n    left, right = 0, len(arr) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == target:\n            return mid\n        elif arr[mid] < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return -1"}
{"text": "def fibonacci(n):\n    if n <= 1:\n        return n\n    return fibonacci(n-1) + fibonacci(n-2)"}
{"text": "class Stack:\n    def __init__(self):\n        self.items = []\n    def push(self, item):\n        self.items.append(item)"}
{"text": "import numpy as np\n\ndef matrix_multiply(A, B):\n    return np.dot(A, B)"}
{"text": "for i in range(10):\n    if i % 2 == 0:\n        print(f'{i} is even')"}
{"text": "def quicksort(arr):\n    if len(arr) <= 1:\n        return arr\n    pivot = arr[0]\n    return quicksort([x for x in arr[1:] if x < pivot]) + [pivot] + quicksort([x for x in arr[1:] if x >= pivot])"}
{"text": "async function fetchData(url) {\n    const response = await fetch(url);\n    return response.json();\n}"}
{"text": "SELECT name, age FROM users WHERE age > 18 ORDER BY name;"}
{"text": "def binary_search(arr, target):\n    left, right = 0, len(arr) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == target:\n            return mid\n        elif arr[mid] < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return -1"}
{"text": "def fibonacci(n):\n    if n <= 1:\n        return n\n    return fibonacci(n-1) + fibonacci(n-2)"}
{"text": "class Stack:\n    def __init__(self):\n        self.items = []\n    def push(self, item):\n        self.items.append(item)"}
{"text": "import numpy as np\n\ndef matrix_multiply(A, B):\n    return np.dot(A, B)"}
{"text": "for i in range(10):\n    if i % 2 == 0:\n        print(f'{i} is even')"}
{"text": "def quicksort(arr):\n    if len(arr) <= 1:\n        return arr\n    pivot = arr[0]\n    return quicksort([x for x in arr[1:] if x < pivot]) + [pivot] + quicksort([x for x in arr[1:] if x >= pivot])"}
{"text": "async function fetchData(url) {\n    const response = await fetch(url);\n    return response.json();\n}"}
{"text": "SELECT name, age FROM users WHERE age > 18 ORDER BY name;"}
{"text": "def binary_search(arr, target):\n    left, right = 0, len(arr) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == target:\n            return mid\n        elif arr[mid] < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return -1"}
{"text": "def fibonacci(n):\n    if n <= 1:\n        return n\n    return fibonacci(n-1) + fibonacci(n-2)"}
{"text": "class Stack:\n    def __init__(self):\n        self.items = []\n    def push(self, item):\n        self.items.append(item)"}
{"text": "import numpy as np\n\ndef matrix_multiply(A, B):\n    return np.dot(A, B)"}
{"text": "for i in range(10):\n    if i % 2 == 0:\n        print(f'{i} is even')"}
{"text": "def quicksort(arr):\n    if len(arr) <= 1:\n        return arr\n    pivot = arr[0]\n    return quicksort([x for x in arr[1:] if x < pivot]) + [pivot] + quicksort([x for x in arr[1:] if x >= pivot])"}
{"text": "async function fetchData(url) {\n    const response = await fetch(url);\n    return response.json();\n}"}
{"text": "SELECT name, age FROM users WHERE age > 18 ORDER BY name;"}
{"text": "def binary_search(arr, target):\n    left, right = 0, len(arr) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == target:\n            return mid\n        elif arr[mid] < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return -1"}
{"text": "def fibonacci(n):\n    if n <= 1:\n        return n\n    return fibonacci(n-1) + fibonacci(n-2)"}
{"text": "class Stack:\n    def __init__(self):\n        self.items = []\n    def push(self, item):\n        self.items.append(item)"}
{"text": "import numpy as np\n\ndef matrix_multiply(A, B):\n    return np.dot(A, B)"}
{"text": "for i in range(10):\n    if i % 2 == 0:\n        print(f'{i} is even')"}
{"text": "def quicksort(arr):\n    if len(arr) <= 1:\n        return arr\n    pivot = arr[0]\n    return quicksort([x for x in arr[1:] if x < pivot]) + [pivot] + quicksort([x for x in arr[1:] if x >= pivot])"}
{"text": "async function fetchData(url) {\n    const response = await fetch(url);\n    return response.json();\n}"}
{"text": "SELECT name, age FROM users WHERE age > 18 ORDER BY name;"}
{"text": "def binary_search(arr, target):\n    left, right = 0, len(arr) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == target:\n            return mid\n        elif arr[mid] < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return -1"}
{"text": "def fibonacci(n):\n    if n <= 1:\n        return n\n    return fibonacci(n-1) + fibonacci(n-2)"}
{"text": "class Stack:\n    def __init__(self):\n        self.items = []\n    def push(self, item):\n        self.items.append(item)"}
{"text": "import numpy as np\n\ndef matrix_multiply(A, B):\n    return np.dot(A, B)"}
{"text": "for i in range(10):\n    if i % 2 == 0:\n        print(f'{i} is even')"}
{"text": "def quicksort(arr):\n    if len(arr) <= 1:\n        return arr\n    pivot = arr[0]\n    return quicksort([x for x in arr[1:] if x < pivot]) + [pivot] + quicksort([x for x in arr[1:] if x >= pivot])"}
{"text": "async function fetchData(url) {\n    const response = await fetch(url);\n    return response.json();\n}"}
{"text": "SELECT name, age FROM users WHERE age > 18 ORDER BY name;"}
{"text": "def binary_search(arr, target):\n    left, right = 0, len(arr) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == target:\n            return mid\n        elif arr[mid] < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return -1"}
{"text": "def fibonacci(n):\n    if n <= 1:\n        return n\n    return fibonacci(n-1) + fibonacci(n-2)"}
{"text": "class Stack:\n    def __init__(self):\n        self.items = []\n    def push(self, item):\n        self.items.append(item)"}
{"text": "import numpy as np\n\ndef matrix_multiply(A, B):\n    return np.dot(A, B)"}
{"text": "for i in range(10):\n    if i % 2 == 0:\n        print(f'{i} is even')"}
{"text": "def quicksort(arr):\n    if len(arr) <= 1:\n        return arr\n    pivot = arr[0]\n    return quicksort([x for x in arr[1:] if x < pivot]) + [pivot] + quicksort([x for x in arr[1:] if x >= pivot])"}
{"text": "async function fetchData(url) {\n    const response = await fetch(url);\n    return response.json();\n}"}
{"text": "SELECT name, age FROM users WHERE age > 18 ORDER BY name;"}
{"text": "def binary_search(arr, target):\n    left, right = 0, len(arr) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == target:\n            return mid\n        elif arr[mid] < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return -1"}
{"text": "def fibonacci(n):\n    if n <= 1:\n        return n\n    return fibonacci(n-1) + fibonacci(n-2)"}
{"text": "class Stack:\n    def __init__(self):\n        self.items = []\n    def push(self, item):\n        self.items.append(item)"}
{"text": "import numpy as np\n\ndef matrix_multiply(A, B):\n    return np.dot(A, B)"}
{"text": "for i in range(10):\n    if i % 2 == 0:\n        print(f'{i} is even')"}
{"text": "def quicksort(arr):\n    if len(arr) <= 1:\n        return arr\n    pivot = arr[0]\n    return quicksort([x for x in arr[1:] if x < pivot]) + [pivot] + quicksort([x for x in arr[1:] if x >= pivot])"}
{"text": "async function fetchData(url) {\n    const response = await fetch(url);\n    return response.json();\n}"}
{"text": "SELECT name, age FROM users WHERE age > 18 ORDER BY name;"}
{"text": "def binary_search(arr, target):\n    left, right = 0, len(arr) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == target:\n            return mid\n        elif arr[mid] < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return -1"}
{"text": "def fibonacci(n):\n    if n <= 1:\n        return n\n    return fibonacci(n-1) + fibonacci(n-2)"}
{"text": "class Stack:\n    def __init__(self):\n        self.items = []\n    def push(self, item):\n        self.items.append(item)"}
{"text": "import numpy as np\n\ndef matrix_multiply(A, B):\n    return np.dot(A, B)"}
{"text": "for i in range(10):\n    if i % 2 == 0:\n        print(f'{i} is even')"}
{"text": "def quicksort(arr):\n    if len(arr) <= 1:\n        return arr\n    pivot = arr[0]\n    return quicksort([x for x in arr[1:] if x < pivot]) + [pivot] + quicksort([x for x in arr[1:] if x >= pivot])"}
{"text": "async function fetchData(url) {\n    const response = await fetch(url);\n    return response.json();\n}"}
{"text": "SELECT name, age FROM users WHERE age > 18 ORDER BY name;"}
{"text": "def binary_search(arr, target):\n    left, right = 0, len(arr) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == target:\n            return mid\n        elif arr[mid] < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return -1"}
{"text": "def fibonacci(n):\n    if n <= 1:\n        return n\n    return fibonacci(n-1) + fibonacci(n-2)"}
{"text": "class Stack:\n    def __init__(self):\n        self.items = []\n    def push(self, item):\n        self.items.append(item)"}
{"text": "import numpy as np\n\ndef matrix_multiply(A, B):\n    return np.dot(A, B)"}
{"text": "for i in range(10):\n    if i % 2 == 0:\n        print(f'{i} is even')"}
{"text": "def quicksort(arr):\n    if len(arr) <= 1:\n        return arr\n    pivot = arr[0]\n    return quicksort([x for x in arr[1:] if x < pivot]) + [pivot] + quicksort([x for x in arr[1:] if x >= pivot])"}
{"text": "async function fetchData(url) {\n    const response = await fetch(url);\n    return response.json();\n}"}
{"text": "SELECT name, age FROM users WHERE age > 18 ORDER BY name;"}
{"text": "def binary_search(arr, target):\n    left, right = 0, len(arr) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == target:\n            return mid\n        elif arr[mid] < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return -1"}
{"text": "def fibonacci(n):\n    if n <= 1:\n        return n\n    return fibonacci(n-1) + fibonacci(n-2)"}
{"text": "class Stack:\n    def __init__(self):\n        self.items = []\n    def push(self, item):\n        self.items.append(item)"}
{"text": "import numpy as np\n\ndef matrix_multiply(A, B):\n    return np.dot(A, B)"}
{"text": "for i in range(10):\n    if i % 2 == 0:\n        print(f'{i} is even')"}
{"text": "def quicksort(arr):\n    if len(arr) <= 1:\n        return arr\n    pivot = arr[0]\n    return quicksort([x for x in arr[1:] if x < pivot]) + [pivot] + quicksort([x for x in arr[1:] if x >= pivot])"}
{"text": "async function fetchData(url) {\n    const response = await fetch(url);\n    return response.json();\n}"}
{"text": "SELECT name, age FROM users WHERE age > 18 ORDER BY name;"}
{"text": "def binary_search(arr, target):\n    left, right = 0, len(arr) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == target:\n            return mid\n        elif arr[mid] < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return -1"}
{"text": "def fibonacci(n):\n    if n <= 1:\n        return n\n    return fibonacci(n-1) + fibonacci(n-2)"}
{"text": "class Stack:\n    def __init__(self):\n        self.items = []\n    def push(self, item):\n        self.items.append(item)"}
{"text": "import numpy as np\n\ndef matrix_multiply(A, B):\n    return np.dot(A, B)"}
{"text": "for i in range(10):\n    if i % 2 == 0:\n        print(f'{i} is even')"}
{"text": "def quicksort(arr):\n    if len(arr) <= 1:\n        return arr\n    pivot = arr[0]\n    return quicksort([x for x in arr[1:] if x < pivot]) + [pivot] + quicksort([x for x in arr[1:] if x >= pivot])"}
{"text": "async function fetchData(url) {\n    const response = await fetch(url);\n    return response.json();\n}"}
{"text": "SELECT name, age FROM users WHERE age > 18 ORDER BY name;"}
{"text": "def binary_search(arr, target):\n    left, right = 0, len(arr) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == target:\n            return mid\n        elif arr[mid] < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return -1"}
{"text": "def fibonacci(n):\n    if n <= 1:\n        return n\n    return fibonacci(n-1) + fibonacci(n-2)"}
{"text": "class Stack:\n    def __init__(self):\n        self.items = []\n    def push(self, item):\n        self.items.append(item)"}
{"text": "import numpy as np\n\ndef matrix_multiply(A, B):\n    return np.dot(A, B)"}
{"text": "for i in range(10):\n    if i % 2 == 0:\n        print(f'{i} is even')"}
{"text": "def quicksort(arr):\n    if len(arr) <= 1:\n        return arr\n    pivot = arr[0]\n    return quicksort([x for x in arr[1:] if x < pivot]) + [pivot] + quicksort([x for x in arr[1:] if x >= pivot])"}
{"text": "async function fetchData(url) {\n    const response = await fetch(url);\n    return response.json();\n}"}
{"text": "SELECT name, age FROM users WHERE age > 18 ORDER BY name;"}
{"text": "def binary_search(arr, target):\n    left, right = 0, len(arr) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == target:\n            return mid\n        elif arr[mid] < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return -1"}
